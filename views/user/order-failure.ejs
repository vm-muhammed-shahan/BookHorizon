<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Order Failure</title>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: #ffffff;
      color: #333;
      line-height: 1.6;
    }

    .container {
      max-width: 600px;
      margin: 50px auto;
      padding: 2rem;
      text-align: center;
      background: #fff;
      border: 1px solid #e0e0e0;
      border-radius: 8px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .failure-illustration {
      max-width: 200px;
      margin-bottom: 1.5rem;
    }

    h2 {
      font-size: 2rem;
      font-weight: 600;
      color: #000;
      margin-bottom: 1rem;
    }

    p {
      color: #666;
      font-size: 1.1rem;
      margin-bottom: 2rem;
    }

    .btn {
      display: inline-block;
      padding: 0.75rem 1.5rem;
      border-radius: 4px;
      font-size: 1rem;
      font-weight: 500;
      text-decoration: none;
      cursor: pointer;
      transition: all 0.3s ease;
      margin: 0.5rem;
    }

    .btn-primary {
      background: #000;
      color: #fff;
      border: none;
    }

    .btn-primary:hover {
      background: #333;
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    }

    .btn-secondary {
      background: #f8f8f8;
      color: #333;
      border: 1px solid #e0e0e0;
    }

    .btn-secondary:hover {
      background: #e0e0e0;
      transform: translateY(-2px);
    }

    @media (max-width: 768px) {
      .container {
        margin: 20px;
        padding: 1rem;
      }

      .btn {
        display: block;
        width: 100%;
        margin: 0.5rem 0;
      }
    }
  </style>
</head>
<body>
  <div class="container">
  <svg class="failure-illustration" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
    <circle cx="50" cy="50" r="45" fill="#dc3545" stroke="#a71d2a" stroke-width="3"/>
    <line x1="35" y1="35" x2="65" y2="65" stroke="white" stroke-width="6" stroke-linecap="round"/>
    <line x1="65" y1="35" x2="35" y2="65" stroke="white" stroke-width="6" stroke-linecap="round"/>
  </svg>
  <h2>Order Failed</h2>
  <p>Sorry, the payment for order #<%= order.orderId %> could not be processed. Your payment was declined. This could be due to insufficient funds, network issues, or bank restrictions.</p>
  <div>
    <button onclick="retryPayment('<%= order.orderId %>')" class="btn btn-primary">Retry Payment</button>
    <button onclick="cancelOrder('<%= order.orderId %>')" class="btn btn-primary">Cancel Order</button>
  </div>
</div>

  
  <script>

async function cancelOrder(orderId) {
    try {
      const response = await fetch('/checkout/cancel-order', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ orderId }),
      });
      const result = await response.json();
      if (result.success) {
        Swal.fire({
          icon: 'success',
          title: 'Order Cancelled',
          text: 'Your order has been cancelled successfully.',
          confirmButtonColor: '#333'
        }).then(() => {
          window.location.href = '/shop';
        });
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: result.error || 'Failed to cancel order.',
          confirmButtonColor: '#333'
        });
      }
    } catch (error) {
      console.error('Error cancelling order:', error);
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'Something went wrong. Please try again.',
        confirmButtonColor: '#333'
      });
    }
  }





    async function retryPayment(orderId) {
      try {
        const response = await fetch('/checkout/retry-payment', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ orderId }),
        });
        const result = await response.json();
        if (result.error) {
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: result.error,
            confirmButtonColor: '#333'
          });
          return;
        }
        const options = {
          key: result.key,
          amount: result.amount,
          currency: result.currency,
          name: 'BookHorizon',
          description: 'Order Payment Retry',
          order_id: result.razorpayOrderId,
          handler: async function (response) {
            const verifyResponse = await fetch('/checkout/verify-payment', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                orderId: result.orderId,
                razorpay_payment_id: response.razorpay_payment_id,
                razorpay_order_id: response.razorpay_order_id,
                razorpay_signature: response.razorpay_signature,
              }),
            });
            const verifyResult = await verifyResponse.json();
            if (verifyResult.success) {
              Swal.fire({
                icon: 'success',
                title: 'Payment Successful',
                text: 'Your order has been placed!',
                confirmButtonColor: '#333'
              }).then(() => {
                window.location.href = verifyResult.redirect;
              });
            } else {
              Swal.fire({
                icon: 'error',
                title: 'Payment Failed',
                text: 'Payment verification failed. Please try again.',
                confirmButtonColor: '#333'
              }).then(() => {
                window.location.href = verifyResult.redirect;
              });
            }
          },
          prefill: {
            name: '<%= order.user.name %>',
            email: '<%= order.user.email %>',
            contact: '<%= order.address.phone %>',
          },
          theme: { color: '#333' },
        };
        const rzp = new Razorpay(options);
        rzp.on('payment.failed', async function (response) {
          try {
            await fetch('/checkout/payment-failed', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ orderId: result.orderId })
            });
          } catch (error) {
            console.error('Error reporting payment failure:', error);
          } finally {
            window.location.href = `/order/failure/${result.orderId}`;
          }
        });
        rzp.open();
      } catch (error) {
        console.error('Error retrying payment:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'Something went wrong. Please try again.',
          confirmButtonColor: '#333'
        });
      }
    }
  </script>
</body>
</html>