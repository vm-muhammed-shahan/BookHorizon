<style>
  body {
    font-family: Arial, sans-serif;
    color: #000;
    background-color: #fff;
    line-height: 1.6;
  }
  h2 {
    border-bottom: 2px solid #000;
    padding-bottom: 8px;
    margin-bottom: 20px;
  }
  .search-container {
    margin-bottom: 20px;
  }
  .search-container input {
    padding: 8px;
    width: 300px;
    border: 1px solid #ccc;
    border-radius: 4px;
  }
  .search-container button {
    padding: 8px 16px;
    background-color: #333;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  .search-container button:hover {
    background-color: #000;
  }
  .order-list {
    list-style-type: none;
    padding: 0;
  }
  .order-item {
    border: 1px solid #ddd;
    padding: 15px;
    margin-bottom: 10px;
    background-color: #f9f9f9;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  .order-item .details {
    flex: 1;
  }
  .order-item .actions {
    display: flex;
    gap: 10px;
  }
  .order-item .status {
    display: inline-block;
    padding: 3px 8px;
    background-color: #eee;
    border-radius: 3px;
  }
  .order-item button, .order-item a {
    padding: 6px 12px;
    background-color: #333;
    color: white;
    text-decoration: none;
    border-radius: 4px;
    cursor: pointer;
  }
  .order-item button:hover, .order-item a:hover {
    background-color: #000;
  }
</style>

<div class="orders-container">
  <h2>My Orders</h2>

  <!-- Search Bar -->
  <div class="search-container">
    <a href="/profile" class="back-to-orders">Back to profile</a>
    <input type="text" id="searchInput" placeholder="Search by Order ID..." onkeyup="searchOrders()">
    <button onclick="searchOrders()">Search</button>
  </div>

  <ul class="order-list" id="orderList">
    <% if (!orders || orders.length === 0) { %>
      <li>No orders found.</li>
    <% } else { %>
      <% orders.forEach(order => { %>
        <li class="order-item" data-order-id="<%= order.orderId %>">
          <div class="details">
            <strong>Order #<%= order.orderId %></strong><br>
            <p>Placed On: <%= order.createdOn.toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }) %></p>
            <p>Total: â‚¹<%= order.finalAmount.toFixed(2) %></p>
            <p>Status: <span class="status"><%= order.status %></span></p>
          </div>
          <div class="actions">
            <a href="/orders/<%= order.orderId %>">View Details</a>

            <% if (order.status === 'Pending' || order.status === 'Processing') { %>
              
            <% } %>
          </div>
        </li>
      <% }) %>
    <% } %>
  </ul>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
// SweetAlert2 Toast Configuration
const Toast = Swal.mixin({
  toast: true,
  position: 'top-end',
  showConfirmButton: false,
  timer: 3000,
  timerProgressBar: true,
  didOpen: (toast) => {
    toast.addEventListener('mouseenter', Swal.stopTimer);
    toast.addEventListener('mouseleave', Swal.resumeTimer);
  }
});

// Search Orders
function searchOrders() {
  const input = document.getElementById('searchInput').value.toLowerCase();
  const orderItems = document.querySelectorAll('.order-item');

  orderItems.forEach(item => {
    const orderId = item.getAttribute('data-order-id').toLowerCase();
    if (orderId.includes(input)) {
      item.style.display = '';
    } else {
      item.style.display = 'none';
    }
  });
}

// Cancel Entire Order
function cancelOrder(orderId) {
  Swal.fire({
    title: 'Cancel Order',
    text: 'Are you sure you want to cancel this order?',
    input: 'text',
    inputPlaceholder: 'Reason for cancellation (optional)',
    showCancelButton: true,
    confirmButtonText: 'Yes, Cancel Order',
    cancelButtonText: 'No'
  }).then((result) => {
    if (result.isConfirmed) {
      const reason = result.value || '';
      fetch('/orders/cancel', {
        method: 'POST',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        body: new URLSearchParams({ orderId, reason })
      })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            Toast.fire({ icon: 'success', title: 'Order Cancelled' });
            setTimeout(() => { window.location.reload(); }, 3000);
          } else {
            Swal.fire({ title: 'Error', text: data.error || 'Failed to cancel order', icon: 'error' });
          }
        })
        .catch(error => {
          console.error('Fetch error:', error);
          Swal.fire({ title: 'Error', text: 'An unexpected error occurred', icon: 'error' });
        });
    }
  });
}
</script>