<%- include("../../views/partials/user/header") %>
<head>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
</head>
<div class="cart-container">
  <h2 class="cart-title">Your Cart</h2>
  <% if (items.length === 0) { %>
    <div class="empty-cart">
      <p class="empty-cart-message">Your cart is empty</p>
      <a href="/shop" class="continue-shopping-btn">Continue Shopping</a>
    </div>
  <% } else { %>
    <div class="cart-items">
      <% items.forEach(item => { %>
        <div class="cart-item">
          <!-- 1. Product Image -->
          <div class="item-image">
            <% if (item.productId && item.productId.productImage && item.productId.productImage.length > 0) { %>
              <a href="/productDetails?id=<%= item.productId._id %>">
                <img src="/Uploads/<%= item.productId.productImage[0] %>" alt="<%= item.productId.productName || 'Product' %>">
              </a>
            <% } else { %>
              <img src="/images/placeholder.png" alt="No Image Available">
            <% } %>
          </div>
          <div class="item-details">
            <!-- 2. Product Name -->
            <h3 class="item-name">
              <%= item.productId.productName || 'Unknown Product' %>
            </h3>
            <!-- 3. Current Price -->
            <p class="item-price">₹ <%= item.price || 0 %></p>
            
            <div class="item-controls">
              <div class="quantity-section">
                <label class="quantity-label">Quantity:</label>
                <div class="quantity-form">
                  <input type="hidden" name="productId" value="<%= item.productId._id %>">
                  <button type="button" 
                          class="quantity-btn js-quantity-btn" 
                          data-action="decrement" 
                          <%= item.quantity <= 1 ? 'disabled' : '' %>>
                    -
                  </button>
                  <span class="quantity"><%= item.quantity || 1 %></span>
                  <% 
                    let currentStock = parseInt(item.productId.quantity) || 0;
                    let maxQuantity = Math.min(5, currentStock);
                    let canIncrement = (item.quantity || 1) < maxQuantity && currentStock > 0;
                  %>
                  <button type="button" 
                          class="quantity-btn js-quantity-btn" 
                          data-action="increment" 
                          <%= !canIncrement ? 'disabled' : '' %>>
                    +
                  </button>
                </div>
                
                <div class="stock-info">
                  <span class="stock-text">
                    <% if (currentStock === 0) { %>
                      Out of stock
                    <% } else if (currentStock > 0 && currentStock <= 5) { %>
                      Only <%= currentStock %> left in stock
                    <% } else if (currentStock > 5) { %>
                      Max 5 per order
                    <% } else { %>
                      Stock information unavailable
                    <% } %>
                  </span>
                </div>
              </div>
              
              <div class="subtotal-section">
                <p class="subtotal">Subtotal: ₹ <%= ((item.price || 0) * (item.quantity || 1)).toFixed(2) %></p>
              </div>
            </div>
            
            <% if (item.productId.quantity === 0) { %>
              <div class="stock-warning">
                <p class="warning-text">⚠️ This item is currently out of stock</p>
              </div>
            <% } %>
            
            <div class="item-actions">
              <button class="remove-btn js-remove-cart" data-id="<%= item.productId._id %>">
                Remove from Cart
              </button>
            </div>
          </div>
        </div>
      <% }) %>
    </div>
    
    <div class="cart-summary">
      <div class="total-amount">
        <h3>Total: ₹ <%= items.reduce((total, item) => total + ((item.price || 0) * (item.quantity || 1)), 0).toFixed(2) %></h3>
      </div>
    </div>
    
    <div class="cart-actions">
      <a href="/shop" class="continue-shopping-btn">Continue Shopping</a>
      <% 
        const hasOutOfStockItems = items.some(item => parseInt(item.productId.quantity) === 0);
      %>
      <% if (hasOutOfStockItems) { %>
        <button class="checkout-btn checkout-disabled" disabled>
          Checkout (Remove out of stock items)
        </button>
      <% } else { %>
        <a href="/checkout" class="checkout-btn">Proceed to Checkout</a>
      <% } %>
    </div>
  <% } %>
</div>

<style>
  .cart-container {
    max-width: 900px;
    margin: 20px auto;
    padding: 30px;
    background-color: white;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  }

  .cart-title {
    font-size: 32px;
    font-weight: 700;
    color: #000;
    margin: 0 0 30px 0;
    padding-bottom: 20px;
    border-bottom: 3px solid #000;
    text-align: center;
  }

  .empty-cart {
    text-align: center;
    padding: 60px 0;
  }

  .empty-cart-message {
    font-size: 18px;
    color: #777;
    margin-bottom: 30px;
    font-style: italic;
  }

  .cart-items {
    margin-bottom: 30px;
  }

  .cart-item {
    display: flex;
    padding: 25px;
    margin-bottom: 20px;
    border: 1px solid #eee;
    border-radius: 8px;
    background-color: #fafafa;
    transition: box-shadow 0.3s ease;
  }

  .cart-item:hover {
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  }

  .item-image {
    width: 150px;
    margin-right: 25px;
    flex-shrink: 0;
  }

  .item-image img {
    width: 100%;
    height: 150px;
    border-radius: 8px;
    object-fit: cover;
    border: 2px solid #ddd;
  }

  .item-details {
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  .item-name {
    font-size: 22px;
    font-weight: 600;
    margin: 0 0 10px 0;
    color: #000;
  }

  .item-price {
    font-size: 18px;
    font-weight: 500;
    color: #333;
    margin-bottom: 20px;
  }

  .item-controls {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
    flex-wrap: wrap;
    gap: 15px;
  }

  .quantity-section {
    display: flex;
    align-items: center;
    gap: 10px;
    flex-wrap: wrap;
  }

  .quantity-label {
    font-weight: 500;
    color: #333;
  }

  .quantity-form {
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .quantity {
    min-width: 30px;
    text-align: center;
    font-weight: 600;
    font-size: 16px;
    padding: 5px 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    background-color: white;
  }

  .quantity-btn {
    width: 35px;
    height: 35px;
    border-radius: 50%;
    border: 2px solid #000;
    background-color: white;
    font-size: 18px;
    font-weight: bold;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
  }

  .quantity-btn:hover:not(:disabled) {
    background-color: #000;
    color: white;
    transform: scale(1.05);
  }

  .quantity-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    border-color: #ccc;
    color: #ccc;
  }

  .stock-info {
    margin-left: 10px;
  }

  .stock-text {
    font-size: 12px;
    color: #666;
    font-style: italic;
  }

  .stock-warning {
    margin-bottom: 10px;
  }

  .warning-text {
    color: #dc3545;
    font-size: 14px;
    font-weight: 500;
    margin: 0;
    padding: 8px 12px;
    background-color: #f8d7da;
    border: 1px solid #f5c6cb;
    border-radius: 4px;
  }

  .subtotal-section {
    text-align: right;
  }

  .subtotal {
    font-size: 18px;
    font-weight: 600;
    color: #000;
    margin: 0;
  }

  .item-actions {
    margin-top: auto;
  }

  .remove-btn {
    color: #dc3545;
    text-decoration: none;
    font-size: 14px;
    font-weight: 500;
    padding: 8px 15px;
    border: 2px solid #dc3545;
    border-radius: 6px;
    transition: all 0.3s ease;
    display: inline-block;
    background: none;
    cursor: pointer;
  }

  .remove-btn:hover {
    background-color: #dc3545;
    color: white;
    transform: translateY(-1px);
  }

  .cart-summary {
    background-color: #f8f9fa;
    padding: 20px;
    border-radius: 8px;
    margin-bottom: 30px;
    text-align: right;
  }

  .total-amount h3 {
    font-size: 24px;
    font-weight: 700;
    color: #000;
    margin: 0;
  }

  .cart-actions {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 20px;
    flex-wrap: wrap;
  }

  .continue-shopping-btn {
    display: inline-block;
    padding: 12px 24px;
    background-color: white;
    color: #000;
    text-decoration: none;
    border: 2px solid #000;
    border-radius: 6px;
    font-weight: 500;
    transition: all 0.3s ease;
  }

  .continue-shopping-btn:hover {
    background-color: #f8f9fa;
    transform: translateY(-2px);
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  }

  .checkout-btn {
    display: inline-block;
    padding: 12px 24px;
    background-color: #000;
    color: white;
    text-decoration: none;
    border-radius: 6px;
    font-weight: 500;
    transition: all 0.3s ease;
    border: none;
    cursor: pointer;
  }

  .checkout-btn:hover:not(.checkout-disabled) {
    background-color: #333;
    transform: translateY(-2px);
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
  }

  .checkout-disabled {
    background-color: #6c757d !important;
    cursor: not-allowed !important;
    opacity: 0.6;
  }

  .checkout-disabled:hover {
    transform: none !important;
    box-shadow: none !important;
  }

  @media (max-width: 768px) {
    .cart-item {
      flex-direction: column;
    }

    .item-image {
      width: 100%;
      margin-right: 0;
      margin-bottom: 15px;
    }

    .item-image img {
      height: 200px;
    }

    .item-controls {
      flex-direction: column;
      align-items: flex-start;
    }

    .subtotal-section {
      text-align: left;
    }

    .cart-actions {
      flex-direction: column;
    }

    .continue-shopping-btn,
    .checkout-btn {
      width: 100%;
      text-align: center;
    }

    .quantity-section {
      flex-direction: column;
      align-items: flex-start;
      gap: 5px;
    }

    .stock-info {
      margin-left: 0;
    }
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const toast = (icon, title) => 
    Swal.fire({ toast: true, position: 'top-end', icon, title, showConfirmButton: false, timer: 2000 });

  // Remove from cart handler
  document.querySelectorAll('.js-remove-cart').forEach(btn => {
    btn.addEventListener('click', async () => {
      const result = await Swal.fire({
        title: 'Remove this item?',
        text: 'Are you sure you want to remove this item from your cart?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#dc3545',
        cancelButtonColor: '#6c757d',
        confirmButtonText: 'Yes, remove it!',
        cancelButtonText: 'Cancel'
      });

      if (!result.isConfirmed) return;

      btn.disabled = true;
      btn.innerHTML = '<span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span> Removing...';

      try {
        const response = await fetch('/cart/remove', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ productId: btn.dataset.id })
        });
        const data = await response.json();

        btn.disabled = false;
        btn.innerHTML = 'Remove from Cart';

        if (data.success) {
          toast('success', 'Item removed from cart');
          const cartItem = btn.closest('.cart-item');
          cartItem.remove();

          const remainingItems = document.querySelectorAll('.cart-item');
          if (remainingItems.length === 0) {
            const cartContainer = document.querySelector('.cart-container');
            cartContainer.innerHTML = `
              <h2 class="cart-title">Your Cart</h2>
              <div class="empty-cart">
                <p class="empty-cart-message">Your cart is empty</p>
                <a href="/shop" class="continue-shopping-btn">Continue Shopping</a>
              </div>`;
          } else {
            let total = 0;
            remainingItems.forEach(item => {
              const price = parseFloat(item.querySelector('.item-price').textContent.replace('₹ ', '')) || 0;
              const quantity = parseInt(item.querySelector('.quantity').textContent) || 1;
              total += price * quantity;
            });
            document.querySelector('.total-amount h3').textContent = `Total: ₹ ${total.toFixed(2)}`;

            const hasOutOfStockItems = Array.from(remainingItems).some(item => {
              const stockText = item.querySelector('.stock-text')?.textContent || '';
              return stockText.includes('Out of stock');
            });
            const checkoutBtn = document.querySelector('.checkout-btn');
            if (hasOutOfStockItems) {
              checkoutBtn.classList.add('checkout-disabled');
              checkoutBtn.setAttribute('disabled', 'true');
              checkoutBtn.innerHTML = 'Checkout (Remove out of stock items)';
              checkoutBtn.removeAttribute('href');
            } else {
              checkoutBtn.classList.remove('checkout-disabled');
              checkoutBtn.removeAttribute('disabled');
              checkoutBtn.setAttribute('href', '/checkout');
              checkoutBtn.innerHTML = 'Proceed to Checkout';
            }
          }
        } else {
          throw new Error(data.message || 'Failed to remove item');
        }
      } catch (error) {
        console.error('Error:', error);
        btn.disabled = false;
        btn.innerHTML = 'Remove from Cart';
        toast('error', error.message || 'Something went wrong');
      }
    });
  });

  // Quantity update handler
  document.querySelectorAll('.js-quantity-btn').forEach(btn => {
    btn.addEventListener('click', async () => {
      const action = btn.dataset.action;
      const quantityForm = btn.closest('.quantity-form');
      const productId = quantityForm.querySelector('input[name="productId"]').value;
      const cartItem = btn.closest('.cart-item');
      const quantityElement = cartItem.querySelector('.quantity');
      const subtotalElement = cartItem.querySelector('.subtotal');
      const price = parseFloat(cartItem.querySelector('.item-price').textContent.replace('₹ ', '')) || 0;
      const currentStock = parseInt(cartItem.querySelector('.stock-text').textContent.match(/\d+/) || 0);
      const maxQuantity = Math.min(5, currentStock);

      btn.disabled = true;

      try {
        const response = await fetch('/cart/update-quantity', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ productId, action })
        });
        const data = await response.json();

        if (!response.ok) {
          throw new Error(data.error || 'Failed to update quantity');
        }

        // Update quantity
        quantityElement.textContent = data.quantity;

        // Update subtotal
        const subtotal = (price * data.quantity).toFixed(2);
        subtotalElement.textContent = `Subtotal: ₹ ${subtotal}`;

        // Update total
        let total = 0;
        document.querySelectorAll('.cart-item').forEach(item => {
          const itemPrice = parseFloat(item.querySelector('.item-price').textContent.replace('₹ ', '')) || 0;
          const itemQuantity = parseInt(item.querySelector('.quantity').textContent) || 1;
          total += itemPrice * itemQuantity;
        });
        document.querySelector('.total-amount h3').textContent = `Total: ₹ ${total.toFixed(2)}`;

        // Update button states
        const decrementBtn = quantityForm.querySelector('[data-action="decrement"]');
        const incrementBtn = quantityForm.querySelector('[data-action="increment"]');
        decrementBtn.disabled = data.quantity <= 1;
        incrementBtn.disabled = data.quantity >= maxQuantity;

        btn.disabled = false;
      } catch (error) {
        console.error('Error:', error);
        btn.disabled = false;
        toast('error', error.message || 'Something went wrong');
      }
    });
  });
});
</script>

<%- include("../../views/partials/user/footer") %>