<!DOCTYPE html>
<html lang="en">
  
<head>
  
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Order #<%= order.orderId %></title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>

<body>
  <div class="order-container">
    <h2 class="order-title">Order #<%= order.orderId %></h2>
    
    <% if (notification) { %>
      <div class="notification notification-info">
        <%= notification.text %>
      </div>
    <% } %>

    <!-- Order Summary -->
    <div class="order-summary-grid">
      <div class="summary-section">
        <h3>Order Summary</h3>
        <div class="summary-item">
          <span class="label">Order ID:</span>
          <span class="value"><%= order.orderId %></span>
        </div>
        <div class="summary-item">
          <span class="label">Date:</span>
          <span class="value"><%= order.createdOn ? new Date(order.createdOn).toLocaleString() : 'N/A' %></span>
        </div>
        <div class="summary-item">
          <span class="label">Status:</span>
          <span class="value" data-field="status"><%= order.status %></span>
        </div>
        <div class="summary-item">
          <span class="label">Payment Status:</span>
          <span class="value" data-field="paymentStatus"><%= order.paymentStatus %></span>
        </div>
        <div class="summary-item">
          <span class="label">Payment Method:</span>
          <span class="value"><%= order.paymentMethod === 'cod' ? 'Cash on Delivery' : 'Online Payment' %></span>
        </div>
        <div class="summary-item">
          <span class="label">Total Price:</span>
          <span class="value">₹<%= order.totalPrice ? order.totalPrice.toFixed(2) : '0.00' %></span>
        </div>
        <div class="summary-item">
          <span class="label">Discount:</span>
          <span class="value">₹<%= order.discount ? order.discount.toFixed(2) : '0.00' %></span>
        </div>
        <div class="summary-item">
          <span class="label">Shipping Charge:</span>
          <span class="value">₹<%= order.shippingCharge ? order.shippingCharge.toFixed(2) : '0.00' %></span>
        </div>
        <div class="summary-item highlight">
          <span class="label">Final Amount:</span>
          <span class="value">₹<%= order.finalAmount ? order.finalAmount.toFixed(2) : '0.00' %></span>
        </div>
        <% if (order.couponApplied) { %>
          <div class="summary-item">
            <span class="label">Coupon Applied:</span>
            <span class="value">Yes</span>
          </div>
        <% } %>
      </div>

      <div class="summary-section">
        <h3>Shipping Address</h3>
        <div class="summary-item">
          <span class="label">Name:</span>
          <span class="value"><%= order.address.name %></span>
        </div>
        <div class="summary-item">
          <span class="label">Address:</span>
          <span class="value"><%= order.address.landMark %>, <%= order.address.city %>, <%= order.address.state %>, <%= order.address.pincode %></span>
        </div>
        <div class="summary-item">
          <span class="label">Phone:</span>
          <span class="value"><%= order.address.phone %></span>
        </div>
        <% if (order.address.altPhone) { %>
          <div class="summary-item">
            <span class="label">Alt Phone:</span>
            <span class="value"><%= order.address.altPhone %></span>
          </div>
        <% } %>
      </div>
    </div>

    <!-- Items Section -->
    <div class="items-section">
      <h3>Order Items</h3>
      <% order.orderedItems.forEach(item => { %>
        <div class="order-item" data-product-id="<%= item.product._id %>">
          <div class="item-details">
            <h4 class="item-name"><%= item.product && item.product.productName ? item.product.productName : 'N/A' %></h4>
            
            <div class="item-info">
              <div class="info-row">
                <span class="info-label">Quantity:</span>
                <span class="info-value"><%= item.quantity %></span>
              </div>
              <div class="info-row">
                <span class="info-label">Price:</span>
                <span class="info-value">₹<%= item.price ? item.price.toFixed(2) : '0.00' %></span>
              </div>
              <div class="info-row">
                <span class="info-label">Total:</span>
                <span class="info-value">₹<%= (item.price * item.quantity).toFixed(2) %></span>
              </div>
              <div class="info-row">
                
                <span class="info-value status-text">
                  <% if (item.cancelled) { %>
                    Cancelled: <%= item.cancelReason || 'No reason provided' %>
                  <% } else if (item.returned && item.returnStatus === 'pending') { %>
                    Return Requested: <%= item.returnReason || 'No reason provided' %>
                  <% } else if (item.returned && item.returnStatus === 'approved') { %>
                    Returned: <%= item.returnReason || 'No reason provided' %>
                  <% } else if (item.returned && item.returnStatus === 'rejected') { %>
                    Return Rejected: <%= item.returnReason || 'No reason provided' %>
                  <% }  %>
                </span>
              </div>
            </div>

            <div class="item-actions">
              <% if (!item.cancelled && !item.returned && (order.status === 'Pending' || order.status === 'Processing' || order.status === 'Shipped')) { %>
                <button onclick="openModal('cancel', '<%= order.orderId %>', '<%= item.product._id %>')" class="action-btn cancel-btn">Cancel Item</button>
              <% } %>
              <% if (!item.cancelled && !item.returned && order.status === 'Delivered') { %>
                <button onclick="openModal('return', '<%= order.orderId %>', '<%= item.product._id %>')" class="action-btn return-btn">Return Item</button>
              <% } %>
            </div>
          </div>
        </div>
      <% }) %>
    </div>

    <!-- Order Actions -->
    <div class="order-actions">
      <a href="/orders" class="continue-shopping-btn">Back to Orders</a>
      
      <div class="action-buttons">
        <% if (order.status === 'Pending' || order.status === 'Processing' || order.status === 'Shipped') { %>
          <button onclick="openModal('cancel', '<%= order.orderId %>')" class="clear-wishlist-btn">Cancel Entire Order</button>
        <% } %>
        <a href="/orders/invoice/<%= order.orderId %>" class="action-btn invoice-btn">Download Invoice</a>
      </div>
    </div>
  </div>

  <!-- Reason Modal -->
  <div id="reasonModal" class="modal">
    <div class="modal-content">
      <button class="btn-close" onclick="closeModal()">×</button>
      <h3 id="modalTitle">Reason</h3>
      <textarea id="reasonInput" rows="4" placeholder="Enter your reason here..."></textarea>
      <button class="btn-submit" onclick="submitReason()">Submit</button>
    </div>
  </div>

  <style>
    .order-container {
      max-width: 900px;
      margin: 20px auto;
      padding: 30px;
      background-color: white;
      border-radius: 12px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .order-title {
      font-size: 32px;
      font-weight: 700;
      color: #000;
      margin: 0 0 30px 0;
      padding-bottom: 20px;
      border-bottom: 3px solid #000;
      text-align: center;
    }

    .notification {
      margin-bottom: 20px;
      padding: 15px;
      border-radius: 8px;
      font-size: 14px;
      background-color: #d1ecf1;
      color: #0c5460;
      border-left: 4px solid #17a2b8;
    }

    .order-summary-grid {
      display: grid;
      grid-template-columns: 1fr;
      gap: 20px;
      margin-bottom: 30px;
    }

    @media (min-width: 768px) {
      .order-summary-grid {
        grid-template-columns: 1fr 1fr;
      }
    }

    .summary-section {
      background-color: #fafafa;
      padding: 25px;
      border-radius: 8px;
      border: 1px solid #eee;
    }

    .summary-section h3 {
      font-size: 18px;
      font-weight: 600;
      color: #000;
      margin: 0 0 15px 0;
      padding-bottom: 10px;
      border-bottom: 1px solid #ddd;
    }

    .summary-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 8px 0;
      border-bottom: 1px solid #f0f0f0;
    }

    .summary-item:last-child {
      border-bottom: none;
    }

    .summary-item.highlight {
      background-color: #f8f9fa;
      padding: 12px;
      border-radius: 4px;
      font-weight: 600;
      margin-top: 10px;
    }

    .summary-item .label {
      font-weight: 500;
      color: #333;
    }

    .summary-item .value {
      color: #000;
      font-weight: 500;
    }

    .items-section {
      margin-bottom: 30px;
    }

    .items-section h3 {
      font-size: 22px;
      font-weight: 600;
      color: #000;
      margin: 0 0 20px 0;
      padding-bottom: 10px;
      border-bottom: 2px solid #000;
    }

    .order-item {
      padding: 25px;
      margin-bottom: 20px;
      border: 1px solid #eee;
      border-radius: 8px;
      background-color: #fafafa;
      transition: box-shadow 0.3s ease;
    }

    .order-item:hover {
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .item-name {
      font-size: 18px;
      font-weight: 600;
      color: #000;
      margin: 0 0 15px 0;
    }

    .item-info {
      margin-bottom: 15px;
    }

    .info-row {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 5px 0;
      border-bottom: 1px solid #f0f0f0;
    }

    .info-row:last-child {
      border-bottom: none;
    }

    .info-label {
      font-weight: 500;
      color: #333;
    }

    .info-value {
      color: #000;
      font-weight: 500;
    }

    .status-text {
      font-size: 14px;
      padding: 4px 8px;
      border-radius: 4px;
      background-color: #e9ecef;
    }

    .item-actions {
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
    }

    .action-btn {
      padding: 8px 15px;
      border: none;
      border-radius: 6px;
      font-size: 14px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.3s ease;
      text-decoration: none;
      display: inline-block;
    }

    .cancel-btn {
      background-color: #dc3545;
      color: white;
    }

    .cancel-btn:hover {
      background-color: #c82333;
      transform: translateY(-1px);
    }

    .return-btn {
      background-color: #ffc107;
      color: #000;
    }

    .return-btn:hover {
      background-color: #e0a800;
      transform: translateY(-1px);
    }

    .invoice-btn {
      background-color: #28a745;
      color: white;
    }

    .invoice-btn:hover {
      background-color: #218838;
      transform: translateY(-1px);
    }

    .order-actions {
      display: flex;
      justify-content: space-between;
      align-items: center;
      gap: 20px;
      flex-wrap: wrap;
      padding-top: 20px;
      border-top: 1px solid #eee;
    }

    .action-buttons {
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
    }

    .continue-shopping-btn {
      display: inline-block;
      padding: 12px 24px;
      background-color: white;
      color: #000;
      text-decoration: none;
      border: 2px solid #000;
      border-radius: 6px;
      font-weight: 500;
      transition: all 0.3s ease;
    }

    .continue-shopping-btn:hover {
      background-color: #f8f9fa;
      transform: translateY(-2px);
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .clear-wishlist-btn {
      display: inline-block;
      padding: 12px 24px;
      background-color: #dc3545;
      color: white;
      border: none;
      border-radius: 6px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.3s ease;
      text-decoration: none;
    }

    .clear-wishlist-btn:hover {
      background-color: #c82333;
      transform: translateY(-2px);
      box-shadow: 0 4px 10px rgba(220, 53, 69, 0.3);
    }

    /* Modal Styles */
    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      justify-content: center;
      align-items: center;
      z-index: 1000;
    }

    .modal-content {
      background: #fff;
      padding: 2rem;
      border-radius: 12px;
      width: 90%;
      max-width: 500px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
      position: relative;
    }

    .modal-content h3 {
      font-size: 1.5rem;
      font-weight: 600;
      color: #000;
      margin-bottom: 1rem;
    }

    .modal-content textarea {
      width: 100%;
      padding: 1rem;
      border: 2px solid #e9ecef;
      border-radius: 8px;
      font-size: 1rem;
      margin-bottom: 1rem;
      resize: vertical;
      font-family: inherit;
      transition: border-color 0.3s ease;
    }

    .modal-content textarea:focus {
      outline: none;
      border-color: #000;
      box-shadow: 0 0 0 3px rgba(0, 0, 0, 0.1);
    }

    .modal-content .btn-close {
      position: absolute;
      top: 1rem;
      right: 1rem;
      background: none;
      border: none;
      font-size: 2rem;
      color: #6c757d;
      cursor: pointer;
      width: 40px;
      height: 40px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 50%;
      transition: all 0.3s ease;
    }

    .modal-content .btn-close:hover {
      background: #f8f9fa;
      color: #000;
    }

    .modal-content .btn-submit {
      background: #000;
      color: #fff;
      padding: 0.875rem 1.5rem;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      font-size: 1rem;
      font-weight: 500;
      transition: all 0.3s ease;
    }

    .modal-content .btn-submit:hover {
      background: #333;
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      .order-container {
        margin: 10px;
        padding: 20px;
      }

      .order-title {
        font-size: 24px;
      }

      .summary-section {
        padding: 20px;
      }

      .order-actions {
        flex-direction: column;
        align-items: stretch;
      }

      .action-buttons {
        justify-content: center;
      }

      .continue-shopping-btn,
      .clear-wishlist-btn,
      .action-btn {
        width: 100%;
        text-align: center;
        margin-bottom: 10px;
      }

      .item-actions {
        flex-direction: column;
        gap: 10px;
      }

      .modal-content {
        width: 95%;
        padding: 1.5rem;
      }
    }
  </style>

  <script>
    let currentOrderId = null;
    let currentProductId = null;
    let currentAction = null;
    let pollingInterval = null;
    // Object to store the previous state of each item's returnStatus
    let previousItemStates = {};

    function openModal(action, orderId, productId = null) {
      currentAction = action;
      currentOrderId = orderId;
      currentProductId = productId;
      document.getElementById('modalTitle').textContent = 
        action === 'cancel' ? 
        (productId ? 'Cancel Item' : 'Cancel Entire Order') : 
        'Return Item';
      document.getElementById('reasonInput').value = '';
      document.getElementById('reasonModal').style.display = 'flex';
    }

    function closeModal() {
      document.getElementById('reasonModal').style.display = 'none';
      currentOrderId = null;
      currentProductId = null;
      currentAction = null;
    }

    async function submitReason() {
      const reason = document.getElementById('reasonInput').value.trim();
      
      if (currentAction === 'return' && !reason) {
        await Swal.fire({
          icon: 'warning',
          title: 'Validation Error',
          text: 'Return reason is mandatory.',
          confirmButtonText: 'Okay',
          confirmButtonColor: '#3b82f6'
        });
        return;
      }

      try {
        const url = currentAction === 'cancel' ? '/orders/cancel' : '/orders/return';
        const body = currentAction === 'cancel' 
          ? { orderId: currentOrderId, productId: currentProductId, reason }
          : { orderId: currentOrderId, productId: currentProductId, reason };

        const response = await fetch(url, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(body)
        });

        const result = await response.json();
        if (result.success) {
          await Swal.fire({
            icon: 'success',
            title: 'Success',
            text: result.message,
            confirmButtonText: 'Okay',
            confirmButtonColor: '#3b82f6'
          });
          // Start polling for order status updates if this was a return request
          if (currentAction === 'return') {
            startPolling(currentOrderId);
          } else {
            location.reload();
          }
        } else {
          await Swal.fire({
            icon: 'error',
            title: 'Error',
            text: result.error,
            confirmButtonText: 'Okay',
            confirmButtonColor: '#3b82f6'
          });
        }
      } catch (error) {
        await Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'An error occurred. Please try again.',
          confirmButtonText: 'Okay',
          confirmButtonColor: '#3b82f6'
        });
      }

      closeModal();
    }

    function startPolling(orderId) {
      // Clear any existing polling interval
      if (pollingInterval) {
        clearInterval(pollingInterval);
      }

      // Start polling every 5 seconds
      pollingInterval = setInterval(async () => {
        try {
          const response = await fetch(`/orders/status/${orderId}`);
          const result = await response.json();

          if (result.success) {
            const order = result.order;
            // Update order status
            document.querySelector('[data-field="status"]').textContent = order.status;
            document.querySelector('[data-field="paymentStatus"]').textContent = order.paymentStatus;

            // Update item statuses and check for rejected returns
            order.orderedItems.forEach(item => {
              const orderItem = document.querySelector(`[data-product-id="${item.productId}"]`);
              if (orderItem) {
                const statusText = orderItem.querySelector('.status-text');
                const actionsDiv = orderItem.querySelector('.item-actions');
                const previousState = previousItemStates[item.productId] || {};

                // Check if returnStatus changed to 'rejected'
                if (previousState.returnStatus === 'pending' && item.returnStatus === 'rejected') {
                  Swal.fire({
                    icon: 'error',
                    title: 'Return Request Rejected',
                    text: `Your return request for an item in order ${orderId} has been rejected.`,
                    confirmButtonText: 'Okay',
                    confirmButtonColor: '#3b82f6'
                  });
                }

                // Update the previous state for this item
                previousItemStates[item.productId] = {
                  returnStatus: item.returnStatus,
                  returned: item.returned,
                  cancelReason: item.cancelReason,
                  returnReason: item.returnReason,
                  cancelled: item.cancelled
                };

                // Update status text
                if (item.cancelled) {
                  statusText.textContent = `Cancelled: ${item.cancelReason || 'No reason provided'}`;
                  actionsDiv.innerHTML = '';
                } else if (item.returned && item.returnStatus === 'pending') {
                  statusText.textContent = `Return Requested: ${item.returnReason || 'No reason provided'}`;
                  actionsDiv.innerHTML = '';
                } else if (item.returned && item.returnStatus === 'approved') {
                  statusText.textContent = `Returned: ${item.returnReason || 'No reason provided'}`;
                  actionsDiv.innerHTML = '';
                } else if (item.returned && item.returnStatus === 'rejected') {
                  statusText.textContent = `Return Rejected: ${item.returnReason || 'No reason provided'}`;
                  actionsDiv.innerHTML = order.status === 'Delivered' && !item.cancelled && !item.returned ? 
                    `<button onclick="openModal('return', '${orderId}', '${item.productId}')" class="action-btn return-btn">Return Item</button>` : '';
                } else {
                  statusText.textContent = 'Active';
                  actionsDiv.innerHTML = '';
                }

                // Update actions independently for each item
                if (!item.cancelled && !item.returned && (order.status === 'Pending' || order.status === 'Processing' || order.status === 'Shipped')) {
                  actionsDiv.innerHTML = `<button onclick="openModal('cancel', '${orderId}', '${item.productId}')" class="action-btn cancel-btn">Cancel Item</button>`;
                } else if (!item.cancelled && !item.returned && order.status === 'Delivered') {
                  actionsDiv.innerHTML = `<button onclick="openModal('return', '${orderId}', '${item.productId}')" class="action-btn return-btn">Return Item</button>`;
                }
              }
            });

            // Stop polling if the return request is no longer pending
            const hasPendingReturns = order.orderedItems.some(item => item.returnStatus === 'pending');
            if (!hasPendingReturns) {
              clearInterval(pollingInterval);
              pollingInterval = null;
            }
          }
        } catch (error) {
          console.error('Error polling order status:', error);
        }
      }, 5000);
    }

    // Start polling on page load if there are pending return requests
    window.onload = function() {
      const hasPendingReturns = Array.from(document.querySelectorAll('.status-text'))
        .some(el => el.textContent.includes('Return Requested'));
      if (hasPendingReturns) {
        // Initialize previousItemStates with current state on page load
        <% order.orderedItems.forEach(item => { %>
          previousItemStates['<%= item.product._id %>'] = {
            returnStatus: '<%= item.returnStatus || "" %>',
            returned: <%= item.returned ? 'true' : 'false' %>,
            cancelReason: '<%= item.cancelReason || "" %>',
            returnReason: '<%= item.returnReason || "" %>',
            cancelled: <%= item.cancelled ? 'true' : 'false' %>
          };
        <% }) %>
        startPolling('<%= order.orderId %>');
      }
    };
  </script>

  
</body>
</html>
