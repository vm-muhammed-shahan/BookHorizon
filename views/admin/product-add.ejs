
<%- include("../../views/partials/admin/header") %>

<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
</head>

<style>
.error-message {
    color: red;
    font-size: 0.85rem;
    margin-top: 5px;
    display: none;
}

.thumbnails-container {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin-bottom: 15px;
}

.thumbnail {
    position: relative;
    width: 100px;
    height: 100px;
    border: 1px solid #ddd;
    border-radius: 4px;
    overflow: hidden;
}

.thumbnail img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.remove-icon, .edit-icon {
    position: absolute;
    width: 20px;
    height: 20px;
    background: rgba(0, 0, 0, 0.5);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    font-size: 14px;
    border-radius: 50%;
}

.remove-icon {
    top: 5px;
    right: 5px;
}

.edit-icon {
    bottom: 5px;
    right: 5px;
}

#imageCount.complete {
    color: green;
    font-weight: bold;
}

#imageCount.incomplete {
    color: red;
}

/* Modal Styles */
.crop-modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7);
    align-items: center;
    justify-content: center;
}

.crop-modal-content {
    background-color: white;
    padding: 20px;
    border-radius: 5px;
    max-width: 90%;
    max-height: 90%;
    overflow: auto;
    position: relative;
}

.crop-container {
    width: 100%;
    max-width: 500px;
    height: 400px;
    margin: 0 auto 20px;
}

.crop-img {
    display: block;
    max-width: 100%;
}

.crop-controls {
    display: flex;
    justify-content: center;
    gap: 10px;
    margin-top: 15px;
}

.crop-btn {
    padding: 8px 15px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

.crop-save {
    background-color: #4CAF50;
    color: white;
}

.crop-cancel {
    background-color: #f44336;
    color: white;
}
</style>

<section class="content-main">
    <div class="row">
        <div class="col-9">
            <div class="content-header">
                <h2 class="content-title">Add New Product</h2>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card mb-4">
                <div class="card-body">
                   
                    <form id="productForm" enctype="multipart/form-data" method="POST">
                        <div class="mb-4">
                            <label for="product_name" class="form-label">Product Name</label>
                            <input type="text" placeholder="Type here" name="productName" class="form-control border" id="product_name">
                            <div id="productName-error" class="error-message"></div>
                        </div>

                        <div class="mb-4">
                            <label class="form-label">Full description</label>
                            <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control border" rows="4"></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>

                        <div class="row">
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Regular price</label>
                                    <input placeholder="$" name="regularPrice" type="text" class="form-control border">
                                    <div id="regularPrice-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Sale Price (Calculated)</label>
                                    <input placeholder="$" type="text" class="form-control border" value="Will be calculated" readonly>
                                    <small class="text-muted">Will be set based on best offer or regular price</small>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Quantity</label>
                                    <input placeholder="" name="quantity" type="text" class="form-control border">
                                    <div id="quantity-error" class="error-message"></div>
                                </div>
                            </div>
                        </div>

                        <div class="card mb-4">
                            <div class="card-body">
                                <div class="row gx-2">
                                    <div class="col-sm-6 mb-3">
                                        <label class="form-label">Category</label>
                                        <select class="form-select border" name="category">
                                            <% for(let i=0; i<cat.length; i++) { %>
                                                <option value="<%= cat[i]._id %>">
                                                    <%= cat[i].name %>
                                                </option>
                                            <% } %>
                                        </select>
                                        <div id="category-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="card mb-2">
                            <div class="card-header">
                                <h4>Product Images</h4>
                                <p class="text-muted small">Upload exactly 3 images (required)</p>
                            </div>
                            <div class="card-body">
                                <div id="thumbnails-container" class="thumbnails-container"></div>
                        
                                <div class="mb-3">
                                    <input class="form-control" type="file" id="imageInput" accept="image/png, image/jpeg, image/jpg" multiple>
                                    <div id="images-error" class="error-message"></div>
                                    <small class="text-muted">Selected: <span id="imageCount">0</span>/3 (exactly 3 images required)</small>
                                </div>
                            </div>
                        </div>

                        <div class="mt-4">
                            <button type="submit" class="btn btn-dark">Publish</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Crop Modal -->
<div id="cropModal" class="crop-modal">
    <div class="crop-modal-content">
        <div class="crop-container">
            <img id="cropImage" class="crop-img" src="" alt="Image to crop">
        </div>
        <div class="crop-controls">
            <button id="saveCropBtn" class="crop-btn crop-save">Save Crop</button>
            <button id="cancelCropBtn" class="crop-btn crop-cancel">Cancel</button>
        </div>
    </div>
</div>

<script>
let cropper = null;
let currentImageIndex = null;
let selectedImages = [];
const MAX_IMAGES = 3;

document.addEventListener('DOMContentLoaded', function() {
    document.getElementById('imageInput').addEventListener('change', handleImageSelection);
    document.getElementById('productForm').addEventListener('submit', handleFormSubmit);
    
    document.getElementById('saveCropBtn').addEventListener('click', saveCroppedImage);
    document.getElementById('cancelCropBtn').addEventListener('click', closeModal);
});

async function handleFormSubmit(e) {
    e.preventDefault();
    if (!validateForm()) return;

    const form = e.target;
    const formData = new FormData(form);

    selectedImages.forEach((imageObj) => {
        const blob = imageObj.croppedBlob || imageObj.originalFile;
        const file = new File([blob], imageObj.fileName, {
            type: 'image/jpeg',
            lastModified: new Date().getTime()
        });
        formData.append('productImages', file);
    });

    try {
        const response = await fetch('/admin/addProducts', {
            method: 'POST',
            body: formData
        });
        const data = await response.json();
        console.log(data);

        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: 'Product added successfully',
                confirmButtonColor: '#3085d6'
            }).then(() => {
                form.reset();
                selectedImages = [];
                refreshThumbnails();
                updateImageCounter();
                window.location.href = '/admin/products';
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: data.message || 'Failed to add product. Please try again.',
                confirmButtonColor: '#d33'
            });
        }
    } catch (err) {
        console.error('Error:', err);
        Swal.fire({
            icon: 'error',
            title: 'Network Error',
            text: 'Something went wrong while submitting the form.',
            confirmButtonColor: '#d33'
        });
    }
}

function handleImageSelection(event) {
    const files = event.target.files;
    clearErrorMessage('images-error');

    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
    let invalidFiles = [];
    
    for (let i = 0; i < files.length; i++) {
        if (!allowedTypes.includes(files[i].type)) {
            invalidFiles.push(files[i].name);
        }
    }
    
    if (invalidFiles.length > 0) {
        displayErrorMessage('images-error', `Invalid file type(s): ${invalidFiles.join(', ')}. Only JPG, JPEG, PNG, and WEBP are allowed.`);
        event.target.value = '';
        return;
    }
    
    if (selectedImages.length + files.length > MAX_IMAGES) {
        const remaining = MAX_IMAGES - selectedImages.length;
        if (remaining > 0) {
            displayErrorMessage('images-error', `Please select exactly ${MAX_IMAGES} images. You can add ${remaining} more image${remaining !== 1 ? 's' : ''}.`);
        } else {
            displayErrorMessage('images-error', `Maximum ${MAX_IMAGES} images allowed. Please remove some images before adding more.`);
        }
        event.target.value = '';
        return;
    }

    for (let i = 0; i < files.length && selectedImages.length < MAX_IMAGES; i++) {
        const file = files[i];
        const objectUrl = URL.createObjectURL(file);

        const imageObj = {
            originalFile: file,
            croppedBlob: null,
            originalUrl: objectUrl,
            blobUrl: objectUrl,
            fileName: `product-image-${Date.now()}-${selectedImages.length}.jpg`
        };

        selectedImages.push(imageObj);
        addThumbnail(imageObj, selectedImages.length - 1);
    }

    updateImageCounter();
    
    if (selectedImages.length < MAX_IMAGES) {
        const remaining = MAX_IMAGES - selectedImages.length;
        displayErrorMessage('images-error', `Please select exactly ${MAX_IMAGES} images. You need ${remaining} more image${remaining !== 1 ? 's' : ''}.`);
    } else {
        clearErrorMessage('images-error');
    }
    
    event.target.value = '';
}

function addThumbnail(imageObj, index) {
    const thumbnailsContainer = document.getElementById('thumbnails-container');

    const thumbnail = document.createElement('div');
    thumbnail.classList.add('thumbnail');

    const img = document.createElement('img');
    img.src = imageObj.blobUrl;
    img.alt = `Product image ${index + 1}`;

    const removeIcon = document.createElement('span');
    removeIcon.classList.add('remove-icon');
    removeIcon.innerHTML = '×';
    removeIcon.title = 'Remove';
    removeIcon.onclick = function () {
        removeImage(index);
    };

    const editIcon = document.createElement('span');
    editIcon.classList.add('edit-icon');
    editIcon.innerHTML = '✎';
    editIcon.title = 'Crop';
    editIcon.onclick = function () {
        openCropModal(index);
    };

    thumbnail.appendChild(img);
    thumbnail.appendChild(removeIcon);
    thumbnail.appendChild(editIcon);
    thumbnail.dataset.index = index;

    thumbnailsContainer.appendChild(thumbnail);
}

function removeImage(index) {
    URL.revokeObjectURL(selectedImages[index].blobUrl);
    selectedImages.splice(index, 1);
    refreshThumbnails();
    updateImageCounter();
    
    if (selectedImages.length < MAX_IMAGES) {
        const remaining = MAX_IMAGES - selectedImages.length;
        displayErrorMessage('images-error', `Please select exactly ${MAX_IMAGES} images. You need ${remaining} more image${remaining !== 1 ? 's' : ''}.`);
    } else {
        clearErrorMessage('images-error');
    }
}

function refreshThumbnails() {
    const container = document.getElementById('thumbnails-container');
    container.innerHTML = '';

    selectedImages.forEach((imageObj, index) => {
        addThumbnail(imageObj, index);
    });
}

function updateImageCounter() {
    const countElement = document.getElementById('imageCount');
    countElement.textContent = selectedImages.length;
    
    if (selectedImages.length === MAX_IMAGES) {
        countElement.classList.remove('incomplete');
        countElement.classList.add('complete');
    } else {
        countElement.classList.remove('complete');
        countElement.classList.add('incomplete');
    }
}

function openCropModal(index) {
    currentImageIndex = index;
    const imageObj = selectedImages[index];
    
    const modal = document.getElementById('cropModal');
    const cropImage = document.getElementById('cropImage');
    
    if (cropper) {
        cropper.destroy();
        cropper = null;
    }
    
    cropImage.src = imageObj.originalUrl;
    modal.style.display = 'flex';
    
    cropImage.onload = function() {
        cropper = new Cropper(cropImage, {
            aspectRatio: 1,
            viewMode: 1,
            guides: true,
            autoCropArea: 0.8,
            responsive: true,
            background: false,
            zoomable: true,
            zoomOnWheel: true
        });
    };
}

function closeModal() {
    const modal = document.getElementById('cropModal');
    modal.style.display = 'none';
    
    if (cropper) {
        cropper.destroy();
        cropper = null;
    }
}

function saveCroppedImage() {
    if (!cropper || currentImageIndex === null) {
        console.error('Cropper not initialized or no image selected');
        return;
    }

    const imageObj = selectedImages[currentImageIndex];
    
    const canvas = cropper.getCroppedCanvas({
        width: 600,
        height: 600,
        fillColor: '#fff',
        imageSmoothingEnabled: true,
        imageSmoothingQuality: 'high'
    });

    canvas.toBlob(function(blob) {
        if (imageObj.blobUrl && imageObj.blobUrl !== imageObj.originalUrl) {
            URL.revokeObjectURL(imageObj.blobUrl);
        }
        
        imageObj.croppedBlob = blob;
        imageObj.blobUrl = URL.createObjectURL(blob);

        const thumbnails = document.querySelectorAll('.thumbnail');
        const thumbnail = Array.from(thumbnails).find(
            el => parseInt(el.dataset.index) === currentImageIndex
        );

        if (thumbnail) {
            const img = thumbnail.querySelector('img');
            img.src = imageObj.blobUrl;
        }

        closeModal();
    }, 'image/jpeg', 0.9);
}

function validateForm() {
    clearErrorMessages();
    const name = document.getElementsByName('productName')[0].value;
    const description = document.getElementById('descriptionid').value;
    const price = document.getElementsByName('regularPrice')[0].value;
    const quantity = document.getElementsByName('quantity')[0].value;
    let isValid = true;

    if (name.trim() === "") {
        displayErrorMessage('productName-error', 'Please enter a product name.');
        isValid = false;
    } else if (!/^[a-zA-Z0-9\s!@#$%^&*()_+\-=\[\]{};:'",.<>?/\\|`~]*$/.test(name.trim())) {
        displayErrorMessage('productName-error', 'Product name contains invalid characters.');
        isValid = false;
    }
    
    if (description.trim() === "") {
        displayErrorMessage('description-error', 'Please enter a product description.');
        isValid = false;
    } else if (!/^[a-zA-Z0-9\s.,!?()-]*$/.test(description.trim())) {
        displayErrorMessage('description-error', 'Product description contains invalid characters.');
        isValid = false;
    }
    
    if (quantity.trim() === "" || isNaN(parseInt(quantity))) {
        displayErrorMessage('quantity-error', 'Please enter a valid quantity.');
        isValid = false;
    }
    
    if (!price.trim()) {
        displayErrorMessage('regularPrice-error', 'Please enter a regular price.');
        isValid = false;
    } else if (!/^\d+(\.\d{1,2})?$/.test(price)) {
        displayErrorMessage('regularPrice-error', 'Please enter a valid price format (e.g., 19.99).');
        isValid = false;
    } else if (parseFloat(price) <= 0) {
        displayErrorMessage('regularPrice-error', 'Regular price must be greater than zero.');
        isValid = false;
    }
    
    if (selectedImages.length === 0) {
        displayErrorMessage('images-error', 'Please select product images.');
        isValid = false;
    } else if (selectedImages.length !== 3) {
        displayErrorMessage('images-error', `Exactly 3 product images are required. You have ${selectedImages.length}.`);
        isValid = false;
    }
    
    return isValid;
}

function displayErrorMessage(elementId, message) {
    const errorElement = document.getElementById(elementId);
    errorElement.innerText = message;
    errorElement.style.display = "block";
    errorElement.style.color = "red";
}

function clearErrorMessage(elementId) {
    const errorElement = document.getElementById(elementId);
    errorElement.innerText = '';
    errorElement.style.display = "none";
}

function clearErrorMessages() {
    const errorElements = document.getElementsByClassName('error-message');
    Array.from(errorElements).forEach(element => {
        element.innerText = '';
        element.style.display = "none";
    });
}
</script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<%- include("../../views/partials/admin/footer") %>