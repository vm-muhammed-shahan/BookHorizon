<%- include('../partials/admin/header') %>

<style>
    .order-detail-container {
        padding: 30px;
        background: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    
    .order-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
        padding-bottom: 15px;
        border-bottom: 1px solid #eee;
    }
    
    .order-title {
        font-size: 1.8rem;
        color: #2c3e50;
    }
    
    .order-status, .payment-status {
        padding: 0.25rem 0.75rem;
        border-radius: 9999px;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }
    
    .status-pending { background: #fff3cd; color: #856404; }
    .status-shipped { background: #d4edda; color: #155724; }
    .status-delivered { background: #28a745; color: #fff; }
    .status-cancelled { background: #dc3545; color: #fff; }
    .status-cancel-request { background: #f8d7da; color: #721c24; }
    .status-return-request { background: #fff3cd; color: #856404; }
    .status-returned { background: #6c757d; color: #fff; }
    .status-payment-failed { background: #dc3545; color: #fff; }
    
    .payment-status-pending { background: #fff3cd; color: #856404; }
    .payment-status-paid { background: #28a745; color: #fff; }
    .payment-status-failed { background: #dc3545; color: #fff; }
    .payment-status-refunded { background: #6c757d; color: #fff; }
    
    .order-section {
        margin-bottom: 30px;
    }
    
    .section-title {
        font-size: 1.2rem;
        color: #2c3e50;
        margin-bottom: 15px;
        padding-bottom: 8px;
        border-bottom: 1px solid #eee;
    }
    
    .customer-info, .shipping-info {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
    }
    
    .info-group {
        flex: 1;
        min-width: 250px;
    }
    
    .info-label {
        font-size: 0.8rem;
        color: #6c757d;
        margin-bottom: 5px;
    }
    
    .info-value {
        font-weight: 500;
    }
    
    .items-table {
        width: 100%;
        border-collapse: collapse;
    }
    
    .items-table th {
        background: #f8f9fa;
        padding: 12px;
        text-align: left;
        font-weight: 600;
        color: #2c3e50;
    }
    
    .items-table td {
        padding: 12px;
        border-bottom: 1px solid #eee;
        vertical-align: top;
    }
    
    .item-image {
        width: 60px;
        height: 60px;
        object-fit: cover;
        border-radius: 4px;
    }
    
    .item-name {
        font-weight: 500;
    }
    
    .item-price {
        color: #28a745;
        font-weight: 500;
    }
    
    .summary-row {
        display: flex;
        justify-content: space-between;
        padding: 8px 0;
        border-bottom: 1px solid #eee;
    }
    
    .summary-label {
        color: #6c757d;
    }
    
    .summary-value {
        font-weight: 500;
    }
    
    .total-row {
        font-weight: 600;
        font-size: 1.1rem;
        color: #2c3e50;
    }
    
    .action-buttons {
        display: flex;
        gap: 10px;
        margin-top: 30px;
        flex-wrap: wrap;
    }
    
    .update-status {
        padding: 0.375rem 2.25rem 0.375rem 0.75rem;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6'/%3e%3c/svg%3e");
        background-position: right 0.75rem center;
        background-size: 16px 12px;
        border: 1px solid #e2e8f0;
        border-radius: 6px;
        font-size: 0.8125rem;
        transition: all 0.2s;
    }
    
    .update-status:focus {
        border-color: #4299e1;
        box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.2);
        outline: none;
    }
    
    .update-status:disabled {
        opacity: 0.5;
        cursor: not-allowed;
        background-color: #f8f9fa;
    }
    
    .timeline-container {
        margin-top: 20px;
    }
    
    .timeline-item {
        position: relative;
        padding-left: 30px;
        margin-bottom: 20px;
    }
    
    .timeline-item:before {
        content: '';
        position: absolute;
        left: 6px;
        top: 0;
        width: 12px;
        height: 12px;
        border-radius: 50%;
        background: #3498db;
    }
    
    .timeline-item:after {
        content: '';
        position: absolute;
        left: 11px;
        top: 12px;
        width: 2px;
        height: 100%;
        background: #e0e0e0;
    }
    
    .timeline-item:last-child:after {
        display: none;
    }
    
    .timeline-date {
        font-size: 0.8rem;
        color: #6c757d;
    }
    
    .timeline-content {
        font-size: 0.9rem;
    }
    
    .reason-text {
        padding: 10px;
        background: #f8f9fa;
        border-radius: 4px;
        margin-top: 5px;
        font-size: 0.9rem;
    }
    
    .order-actions .btn {
        padding: 0.375rem 0.75rem;
        font-size: 0.8125rem;
        border-radius: 6px;
        display: inline-flex;
        align-items: center;
        gap: 0.375rem;
    }
    
    .order-actions .btn i {
        font-size: 0.75rem;
    }
</style>

<div class="order-detail-container">
    
    <div class="order-header">
        <h1 class="order-title">Order #<%= order.orderId %></h1>
        <span class="order-status status-<%= order.status.toLowerCase().replace(/\s+/g, '-') %>">
            <%= order.status %>
        </span>
    </div>
    
    
    <div class="order-section">
        <h3 class="section-title">Customer Information</h3>
        <div class="customer-info">
            <div class="info-group">
                <div class="info-label">Name</div>
                <div class="info-value"><%= order.userId ? order.userId.name : 'Guest' %></div>
            </div>
            
            <div class="info-group">
                <div class="info-label">Email</div>
                <div class="info-value"><%= order.userId ? order.userId.email : 'N/A' %></div>
            </div>
            
            <div class="info-group">
                <div class="info-label">Phone</div>
                <div class="info-value"><%= order.userId ? order.userId.phone : 'N/A' %></div>
            </div>
        </div>
    </div>

    <p><strong>Payment Method:</strong> <%= order.paymentMethod %></p>
    <p><strong>Payment Status:</strong> 
        <span class="payment-status payment-status-<%= order.paymentStatus.toLowerCase().replace(/\s+/g, '-') %>">
            <%= order.paymentStatus %>
        </span>
    </p>
    
    <div class="order-section">
        <h3 class="section-title">Shipping Information</h3>
        <div class="shipping-info">
            <div class="info-group">
                <div class="info-label">Name</div>
                <div class="info-value"><%= order.address.name %></div>
            </div>
            
            <div class="info-group">
                <div class="info-label">Address</div>
                <div class="info-value">
                    <%= order.address.landmark %>, <%= order.address.city %><br>
                    <%= order.address.state %> - <%= order.address.pinCode %>
                </div>
            </div>
            
            <div class="info-group">
                <div class="info-label">Contact</div>
                <div class="info-value">
                    <%= order.address.phone %>
                    <% if (order.address.altPhone) { %>
                        <br><%= order.address.altPhone %>
                    <% } %>
                </div>
            </div>
        </div>
    </div>
    
    <div class="order-section">
        <h3 class="section-title">Order Items</h3>
        <table class="items-table">
            <thead>
                <tr>
                    <th>Product</th>
                    <th>Price</th>
                    <th>Quantity</th>
                    <th>Total</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <% order.orderedItems.forEach((item, index) => { %>
                    <tr>
                        <td>
                            <div style="display: flex; align-items: center; gap: 15px;">
                                <img src="<%= item.product.productImage && item.product.productImage.length ? '/Uploads/product-images/' + item.product.productImage[0] : '/images/placeholder-product.png' %>" 
                                     alt="<%= item.product.productName %>" class="item-image">
                                <span class="item-name"><%= item.product.productName %></span>
                            </div>
                        </td>
                        <td class="item-price">₹<%= item.price.toFixed(2) %></td>
                        <td><%= item.quantity %></td>
                        <td class="item-price">₹<%= (item.price * item.quantity).toFixed(2) %></td>
                        <td>
                            <% if (item.cancellationStatus === 'Cancelled') { %>
                                <span class="order-status status-cancelled">
                                    Cancelled
                                </span>
                                <% if (item.cancellationReason) { %>
                                    <div class="reason-text">Reason: <%= item.cancellationReason %></div>
                                <% } %>
                            <% } else if (item.cancellationStatus === 'Cancel Request') { %>
                                <span class="order-status status-cancel-request">
                                    Cancel Request
                                </span>
                                <% if (item.cancellationReason) { %>
                                    <div class="reason-text">Reason: <%= item.cancellationReason %></div>
                                <% } %>
                            <% } else if (item.returnStatus === 'Returned') { %>
                                <span class="order-status status-returned">
                                    Returned
                                </span>
                                <% if (item.returnReason) { %>
                                    <div class="reason-text">Reason: <%= item.returnReason %></div>
                                <% } %>
                            <% } else if (item.returnStatus === 'Return Request') { %>
                                <span class="order-status status-return-request">
                                    Return Request
                                </span>
                                <% if (item.returnReason) { %>
                                    <div class="reason-text">Reason: <%= item.returnReason %></div>
                                <% } %>
                            <% } else { %>
                                <span class="order-status status-<%= order.status.toLowerCase().replace(/\s+/g, '-') %>">
                                    <%= order.status %>
                                </span>
                            <% } %>
                        </td>
                        <td>
                            <% if (item.cancellationStatus === 'Cancel Request') { %>
                                <button class="btn btn-sm btn-success approve-cancel-item" 
                                        data-order-id="<%= order.orderId %>" 
                                        data-item-index="<%= index %>">
                                    <i class="fas fa-check-circle"></i> Approve
                                </button>
                                <button class="btn btn-sm btn-danger reject-cancel-item" 
                                        data-order-id="<%= order.orderId %>" 
                                        data-item-index="<%= index %>">
                                    <i class="fas fa-times-circle"></i> Reject
                                </button>
                            <% } %>
                            <% if (item.returnStatus === 'Return Request') { %>
                                <button class="btn btn-sm btn-success approve-return-item" 
                                        data-order-id="<%= order.orderId %>" 
                                        data-item-index="<%= index %>">
                                    <i class="fas fa-check-circle"></i> Approve
                                </button>
                                <button class="btn btn-sm btn-danger reject-return-item" 
                                        data-order-id="<%= order.orderId %>" 
                                        data-item-index="<%= index %>">
                                    <i class="fas fa-times-circle"></i> Reject
                                </button>
                            <% } %>
                        </td>
                    </tr>
                <% }) %>
            </tbody>
        </table>
    </div>
    
    <div class="order-section">
        <h3 class="section-title">Order Summary</h3>
        <div style="max-width: 400px; margin-left: auto;">
            <div class="summary-row">
                <span class="summary-label">Subtotal</span>
                <span class="summary-value">₹<%= ((order.totalPrice || 0) + (order.discount || 0)).toFixed(2) %></span>
            </div>
            
            <% if (order.discount > 0) { %>
                <div class="summary-row">
                    <span class="summary-label">Product Discount</span>
                    <span class="summary-value">-₹<%= order.discount.toFixed(2) %></span>
                </div>
            <% } %>
            
            <div class="summary-row">
                <span class="summary-label">Coupon Discount</span>
                <span class="summary-value">-₹<%= (order.couponDiscount || 0).toFixed(2) %></span>
            </div>
            
            <div class="summary-row">
                <span class="summary-label">Shipping</span>
                <span class="summary-value">₹<%= order.shippingCost.toFixed(2) %></span>
            </div>

            <% 
            // Calculate returned items total
            let returnedItemsTotal = 0;
            order.orderedItems.forEach(item => {
                if (item.returnStatus === 'Returned') {
                    returnedItemsTotal += (item.price * item.quantity);
                }
            });
            if (returnedItemsTotal > 0) { %>
                <div class="summary-row">
                    <span class="summary-label">Returned Items</span>
                    <span class="summary-value">-₹<%= returnedItemsTotal.toFixed(2) %></span>
                </div>
            <% } %>
            
            <div class="summary-row total-row">
                <span>Total</span>
                <span>₹<%= (order.totalPrice - (order.couponDiscount || 0 + returnedItemsTotal)).toFixed(2) %></span>
            </div>
        </div>
    </div>
    
    <% if (order.cancellationReason || order.returnReason) { %>
        <div class="order-section">
            <h3 class="section-title">
                <%= order.cancellationReason ? 'Cancellation Reason' : 'Return Reason' %>
            </h3>
            <div class="reason-text">
                <%= order.cancellationReason || order.returnReason %>
            </div>
        </div>
    <% } %>
    
    <div class="order-section">
        <h3 class="section-title">Order Status Timeline</h3>
        <div class="timeline-container" id="statusTimeline">
            
            <% if (order.orderedItems.some(item => item.cancellationStatus === 'Cancel Request')) { %>
                <div class="timeline-item">
                    <div class="timeline-date"><%= new Date().toLocaleString() %></div>
                    <div class="timeline-content">
                        <strong>Cancel Request Pending</strong>
                        <p>A cancellation request has been submitted and is waiting for admin approval.</p>
                    </div>
                </div>
                <div class="timeline-item">
                    <div class="timeline-date"><%= new Date(order.orderDate).toLocaleString() %></div>
                    <div class="timeline-content">
                        <strong>Order Placed</strong>
                        <p>The order has been successfully placed.</p>
                    </div>
                </div>
            <% } else if (order.orderedItems.some(item => item.returnStatus === 'Return Request')) { %>
                <div class="timeline-item">
                    <div class="timeline-date"><%= new Date().toLocaleString() %></div>
                    <div class="timeline-content">
                        <strong>Return Request Pending</strong>
                        <p>A return request has been submitted and is waiting for admin approval.</p>
                    </div>
                </div>
                <div class="timeline-item">
                    <div class="timeline-date"><%= new Date(order.orderDate).toLocaleString() %></div>
                    <div class="timeline-content">
                        <strong>Order Placed</strong>
                        <p>The order has been successfully placed.</p>
                    </div>
                </div>
            <% } else { %>
                <div class="text-center py-3">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            <% } %>
        </div>
    </div>
    
    <div class="order-section">
        <h3 class="section-title">Order Actions</h3>
        <div class="action-buttons order-actions">
            <% if (!order.orderedItems.some(item => item.cancellationStatus === 'Cancel Request')) { %>
                <select class="form-select update-status w-auto d-inline-block" 
                        id="statusSelect" 
                        data-order-id="<%= order.orderId %>"
                        data-original-status="<%= order.status %>">
                    <% const statuses = ['Pending', 'Shipped', 'Delivered', 'Cancelled', 'Return Request', 'Returned']; %>
                    <% statuses.forEach(status => { %>
                        <option value="<%= status %>" <%= order.status === status ? 'selected' : '' %>>
                            <%= status %>
                        </option>
                    <% }) %>
                </select>
            <% } %>
            
            <a href="/admin/orders/invoice/<%= order.orderId %>" class="btn btn-outline-secondary">
                <i class="fas fa-file-invoice"></i> Download Invoice
            </a>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        
        function updateDropdownState(dropdown, status) {
            const terminalStatuses = ['Cancelled', 'Returned', 'Delivered'];
            dropdown.disabled = terminalStatuses.includes(status);
        }

     
        const statusSelect = document.getElementById('statusSelect');
        if (statusSelect) {
            updateDropdownState(statusSelect, statusSelect.dataset.originalStatus);
        }

        
        const hasPendingRequests = function() {
            
            const cancelRequestElements = document.querySelectorAll('.status-cancel-request');
            if (cancelRequestElements.length > 0) return true;
            
            
            const returnRequestElements = document.querySelectorAll('.status-return-request');
            if (returnRequestElements.length > 0) return true;
            
            return false;
        };

        
        function loadTimeline(orderId) {
            
            if (hasPendingRequests()) {
                console.log('Skipping timeline API call due to pending requests');
                return;
            }
            
            const timelineContainer = document.getElementById('statusTimeline');
            const timeoutDuration = 10000; 
            
            let timeoutId = setTimeout(() => {
                timelineContainer.innerHTML = `
                    <div class="timeline-item">
                        <div class="timeline-date">${new Date().toLocaleString()}</div>
                        <div class="timeline-content">
                            <strong>Current Status: ${statusSelect ? statusSelect.value : 'Unknown'}</strong>
                            <p>Detailed timeline not available. The system is processing your request.</p>
                        </div>
                    </div>
                `;
            }, timeoutDuration);

            fetch(`/admin/orders/timeline/${orderId}`)
                .then(response => {
                    clearTimeout(timeoutId);
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        let timelineHtml = '';
                        if (data.timeline && data.timeline.length > 0) {
                            data.timeline.forEach(item => {
                                timelineHtml += `
                                    <div class="timeline-item">
                                        <div class="timeline-date">${new Date(item.date).toLocaleString()}</div>
                                        <div class="timeline-content">
                                            <strong>${item.status}</strong>
                                            <p>${item.description}</p>
                                        </div>
                                    </div>`;
                            });
                        } else {
                            timelineHtml = `
                                <div class="timeline-item">
                                    <div class="timeline-date">${new Date().toLocaleString()}</div>
                                    <div class="timeline-content">
                                        <strong>Current Status: ${statusSelect ? statusSelect.value : 'Unknown'}</strong>
                                        <p>No additional timeline events available.</p>
                                    </div>
                                </div>`;
                        }
                        timelineContainer.innerHTML = timelineHtml;
                    } else {
                        timelineContainer.innerHTML = `
                            <div class="timeline-item">
                                <div class="timeline-date">${new Date().toLocaleString()}</div>
                                <div class="timeline-content">
                                    <strong>Error Loading Timeline</strong>
                                    <p>${data.message || 'Failed to load timeline data'}</p>
                                </div>
                            </div>`;
                    }
                })
                .catch(error => {
                    clearTimeout(timeoutId);
                    console.error(`Error loading timeline for order ${orderId}:`, error);
                    timelineContainer.innerHTML = `
                        <div class="timeline-item">
                            <div class="timeline-date">${new Date().toLocaleString()}</div>
                            <div class="timeline-content">
                                <strong>Error Loading Timeline</strong>
                                <p>Failed to load timeline. Please try again later.</p>
                            </div>
                        </div>`;
                });
        }

        
        if (statusSelect && !hasPendingRequests()) {
            loadTimeline(statusSelect.dataset.orderId);
        }

        
        if (statusSelect) {
            statusSelect.addEventListener('change', async function() {
                const orderId = this.dataset.orderId;
                const newStatus = this.value;
                const originalStatus = this.dataset.originalStatus;

                const result = await Swal.fire({
                    title: 'Update Order Status',
                    text: `Are you sure you want to change the status to ${newStatus}?`,
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonText: 'Update',
                    cancelButtonText: 'Cancel'
                });

                if (result.isConfirmed) {
                    try {
                        const response = await fetch(`/admin/orders/update-status/${orderId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ 
                                status: newStatus,
                                updateOnlyNonCancelled: true
                            })
                        });

                        const data = await response.json();

                        if (data.success) {
                            await Swal.fire('Success', data.message, 'success');

                            
                            this.dataset.originalStatus = newStatus;
                            updateDropdownState(this, newStatus);

                            
                            const orderStatusBadge = document.querySelector('.order-header .order-status');
                            orderStatusBadge.textContent = newStatus;
                            orderStatusBadge.className = `order-status status-${newStatus.toLowerCase().replace(/\s+/g, '-')}`;

                            
                            if (data.order && data.order.paymentStatus) {
                                const paymentStatusBadge = document.querySelector('.payment-status');
                                paymentStatusBadge.textContent = data.order.paymentStatus;
                                paymentStatusBadge.className = `payment-status payment-status-${data.order.paymentStatus.toLowerCase().replace(/\s+/g, '-')}`;
                            }

                            
                            document.querySelectorAll('.items-table tbody tr').forEach(row => {
                                const statusCell = row.querySelector('td:nth-child(5)');
                                const statusSpan = statusCell.querySelector('.order-status');
                                
                                if (statusSpan && !statusSpan.classList.contains('status-cancelled') && 
                                    !statusSpan.classList.contains('status-returned') &&
                                    !statusSpan.classList.contains('status-cancel-request') &&
                                    !statusSpan.classList.contains('status-return-request')) {
                                    statusSpan.textContent = newStatus;
                                    statusSpan.className = `order-status status-${newStatus.toLowerCase().replace(/\s+/g, '-')}`;
                                }
                            });

                            
                            if (!hasPendingRequests()) {
                                loadTimeline(orderId);
                            } else {
                                
                                const timelineContainer = document.getElementById('statusTimeline');
                                const newEntry = document.createElement('div');
                                newEntry.className = 'timeline-item';
                                newEntry.innerHTML = `
                                    <div class="timeline-date">${new Date().toLocaleString()}</div>
                                    <div class="timeline-content">
                                        <strong>Status Updated</strong>
                                        <p>Order status updated to ${newStatus}.</p>
                                    </div>
                                `;
                                timelineContainer.prepend(newEntry);
                            }
                        } else {
                            await Swal.fire('Error', data.message || 'Failed to update status', 'error');
                            this.value = originalStatus;
                        }
                    } catch (error) {
                        await Swal.fire('Error', 'Failed to update status', 'error');
                        this.value = originalStatus;
                    }
                } else {
                    this.value = originalStatus;
                }
            });
        }

        
        document.querySelectorAll('.approve-cancel-item').forEach(button => {
            button.addEventListener('click', async function(e) {
                e.preventDefault();
                const orderId = this.dataset.orderId;
                const itemIndex = this.dataset.itemIndex;

                
                this.disabled = true;

                const result = await Swal.fire({
                    title: 'Approve Item Cancellation',
                    text: 'Are you sure you want to approve the cancellation of this item and refund the amount (if applicable)?',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonText: 'Approve',
                    cancelButtonText: 'Cancel'
                });

                if (result.isConfirmed) {
                    try {
                        const response = await fetch(`/admin/orders/cancel-item/${orderId}`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ 
                                itemIndex: parseInt(itemIndex), 
                                action: 'approve' 
                            })
                        });

                        const data = await response.json();
                        if (data.success) {
                            await Swal.fire('Success', data.message, 'success');
                            window.location.reload();
                        } else {
                            await Swal.fire('Error', data.message || 'Failed to process item cancellation', 'error');
                            this.disabled = false;
                        }
                    } catch (error) {
                        console.error(`Error approving cancel request for order ${orderId}, item ${itemIndex}:`, error);
                        await Swal.fire('Error', 'Failed to process item cancellation. Please try again.', 'error');
                        this.disabled = false;
                    }
                } else {
                    this.disabled = false;
                }
            });
        });

        
        document.querySelectorAll('.reject-cancel-item').forEach(button => {
            button.addEventListener('click', async function(e) {
                e.preventDefault();
                const orderId = this.dataset.orderId;
                const itemIndex = this.dataset.itemIndex;

               
                this.disabled = true;

                const result = await Swal.fire({
                    title: 'Reject Item Cancellation',
                    text: 'Are you sure you want to reject the cancellation of this item?',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonText: 'Reject',
                    cancelButtonText: 'Cancel'
                });

                if (result.isConfirmed) {
                    try {
                        const response = await fetch(`/admin/orders/cancel-item/${orderId}`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ 
                                itemIndex: parseInt(itemIndex), 
                                action: 'reject' 
                            })
                        });

                        const data = await response.json();
                        if (data.success) {
                            await Swal.fire('Success', data.message, 'success');
                            window.location.reload();
                        } else {
                            await Swal.fire('Error', data.message || 'Failed to process item cancellation', 'error');
                            this.disabled = false;
                        }
                    } catch (error) {
                        console.error(`Error rejecting cancel request for order ${orderId}, item ${itemIndex}:`, error);
                        await Swal.fire('Error', 'Failed to process item cancellation. Please try again.', 'error');
                        this.disabled = false;
                    }
                } else {
                    this.disabled = false;
                }
            });
        });

       
        document.querySelectorAll('.approve-return-item, .reject-return-item').forEach(button => {
            button.addEventListener('click', async function(e) {
                e.preventDefault();
                const orderId = this.dataset.orderId;
                const itemIndex = this.dataset.itemIndex;
                const action = this.classList.contains('approve-return-item') ? 'approve' : 'reject';

                
                this.disabled = true;

                const result = await Swal.fire({
                    title: action === 'approve' ? 'Approve Item Return' : 'Reject Item Return',
                    text: action === 'approve' 
                        ? 'Are you sure you want to approve the return of this item and refund the amount?' 
                        : 'Are you sure you want to reject the return of this item?',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonText: action === 'approve' ? 'Approve' : 'Reject',
                    cancelButtonText: 'Cancel'
                });

                if (result.isConfirmed) {
                    try {
                        const response = await fetch(`/admin/orders/return-item/${orderId}`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ 
                                itemIndex: parseInt(itemIndex), 
                                action: action 
                            })
                        });
                        const data = await response.json();
                        if (data.success) {
                            await Swal.fire('Success', data.message, 'success');
                            window.location.reload();
                        } else {
                            await Swal.fire('Error', data.message || 'Failed to process item return', 'error');
                            this.disabled = false;
                        }
                    } catch (error) {
                        console.error(`Error ${action}ing return request for order ${orderId}, item ${itemIndex}:`, error);
                        await Swal.fire('Error', `Failed to ${action} item return. Please try again.`, 'error');
                        this.disabled = false;
                    }
                } else {
                    this.disabled = false;
                }
            });
        });
    });
</script>

<%- include('../partials/admin/footer') %>