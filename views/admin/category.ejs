<%- include("../../views/partials/admin/header") %>

<div class="container-fluid py-4">
  <!-- Header Section -->
  <div class="d-flex justify-content-between align-items-center mb-4">
    <h2 class="fw-bold text-dark">Category Management</h2>
  </div>

  <!-- Search Bar -->
  <div class="card shadow-sm mb-4">
    <div class="card-body p-3">
      <form action="/admin/category" method="get" class="d-flex justify-content-center">
        <div class="input-group" style="max-width: 600px;">
          <input 
            type="text" 
            class="form-control border-end-0" 
            placeholder="Search categories..." 
            name="search" 
            value="<%= search || '' %>"
          >
          <button class="btn btn-outline-dark" type="submit">
            <i class="fas fa-search me-1"></i>Search
          </button>
          <% if (search) { %>
          <a href="/admin/category" class="btn btn-dark ms-2">Clear</a>
          <% } %>
        </div>
      </form>
    </div>
  </div>

  <!-- Main Content -->
  <div class="card shadow-sm">
    <div class="card-body">
      <div class="row">
        <!-- Create Category Form -->
        <div class="col-md-3">
          <div class="card border h-100">
            <div class="card-body">
              <h5 class="card-title mb-3 fw-bold">Create Category</h5>
              <form method="post" action="/admin/addCategory" onsubmit="return handleFormSubmit(event)">
                <div class="mb-3">
                  <label for="product_name" class="form-label">Name</label>
                  <input 
                    type="text" 
                    name="name" 
                    placeholder="Type here" 
                    class="form-control" 
                    id="product_name" 
                    required 
                  />
                  <div id="name-error" class="error-message"></div>
                </div>
                <div class="mb-3">
                  <label class="form-label">Description</label>
                  <textarea 
                    placeholder="Type here" 
                    name="description" 
                    class="form-control" 
                    id="descriptionId" 
                    rows="4"
                    required
                  ></textarea>
                  <div id="description-error" class="error-message"></div>
                </div>
                <div class="d-grid">
                  <button class="btn btn-dark" type="submit">
                    Create Category
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
        
        <!-- Categories Table -->
        <div class="col-md-9">
          <div class="table-responsive">
            <table class="table table-hover mb-0">
              <thead class="bg-light">
                <tr>
                  <th class="px-3 py-3 text-center">#</th>
                  <th class="px-3 py-3">Name</th>
                  <th class="px-3 py-3">Description</th>
                  <th class="px-3 py-3">Offer (%)</th>
                  <th class="px-3 py-3">Offer Period</th>
                  <th class="px-3 py-3">Status</th>
                  <th class="px-3 py-3">List/Unlist</th>
                  <th class="px-3 py-3">Edit</th>
                  <th class="px-3 py-3">Offer</th>
                </tr>
              </thead>
              <tbody>
                <% cat.forEach((category, index) => { %>
                <tr class="<%= index % 2 === 0 ? 'bg-white' : 'bg-light' %>" id="category-row-<%= category._id %>">
                  <td class="px-3 py-3 text-center"><%= (currentPage - 1) * limit + index + 1 %></td>
                  <td class="px-3 py-3"><%= category.name %></td>
                  <td class="px-3 py-3"><%= category.description %></td>
                  <td class="px-3 py-3" id="offer-percentage-<%= category._id %>">
                    <% 
                      const categoryOffer = offers.find(offer => 
                        offer.offerType === 'category' && 
                        offer.applicableId.toString() === category._id.toString() && 
                        offer.isActive
                      ); 
                    %>
                    <%= categoryOffer ? categoryOffer.discountPercentage + '%' : '0%' %>
                  </td>
                  <td class="px-3 py-3" id="offer-period-<%= category._id %>">
  <% if (categoryOffer) { %>
    <%= `${new Date(categoryOffer.startDate).toLocaleDateString('en-GB')} - ${new Date(categoryOffer.endDate).toLocaleDateString('en-GB')}` %>
  <% } else { %>
    -
  <% } %>
</td>
                  <td class="px-3 py-3">
                    <span 
                      id="status-<%= category._id %>" 
                      class="badge <%= category.isListed ? 'bg-dark' : 'bg-secondary' %>" 
                      style="width: 70px; padding: 6px 10px;">
                      <%= category.isListed ? 'Listed' : 'Unlisted' %>
                    </span>
                  </td>
                  <td class="px-3 py-3">
                    <button 
                      id="toggle-btn-<%= category._id %>" 
                      class="btn btn-sm <%= category.isListed ? 'btn-outline-dark' : 'btn-dark' %>" 
                      style="width: 80px;" 
                      data-id="<%= category._id %>"
                      data-status="<%= category.isListed ? 'Listed' : 'Unlisted' %>"
                      onclick="handleToggle(this)">
                      <%= category.isListed ? 'Unlist' : 'List' %>
                    </button>
                  </td>
                  <td class="px-3 py-3">
                    <a href="/admin/editCategory?id=<%= category._id %>" class="btn btn-sm btn-dark">
                      Edit
                    </a>
                  </td>
                  <td class="px-3 py-3" id="offer-btn-<%= category._id %>">
                    <% if (categoryOffer) { %>
                      <button 
                        class="btn btn-sm btn-danger" 
                        onclick="removeOffer('<%= category._id %>')">
                        Remove Offer
                      </button>
                    <% } else { %>
                      <button 
                        class="btn btn-sm btn-success" 
                        onclick="addOffer('<%= category._id %>')">
                        Add Offer
                      </button>
                    <% } %>
                  </td>
                </tr>
                <% }) %>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Pagination -->
  <div class="mt-4 d-flex justify-content-center">
    <nav aria-label="Page navigation">
      <ul class="pagination">
        <% if (currentPage > 1) { %>
        <li class="page-item">
          <a class="page-link text-dark" href="?page=<%= currentPage-1 %><%= search ? `&search=${search}` : '' %>">
            <i class="fas fa-chevron-left"></i>
          </a>
        </li>
        <% } %>
        
        <% for(let i=1; i <= totalPages; i++) { %>
        <li class="page-item <%= (i === currentPage) ? 'active' : '' %>">
          <a class="page-link <%= (i === currentPage) ? 'bg-dark border-dark' : 'text-dark' %>" 
             href="?page=<%= i %><%= search ? `&search=${search}` : '' %>">
            <%= i %>
          </a>
        </li>
        <% } %>
        
        <% if (currentPage < totalPages) { %>
        <li class="page-item">
          <a class="page-link text-dark" href="?page=<%= currentPage+1 %><%= search ? `&search=${search}` : '' %>">
            <i class="fas fa-chevron-right"></i>
          </a>
        </li>
        <% } %>
      </ul>
    </nav>
  </div>   
</div>

<style>
  .error-message {
    color: #dc3545;
    font-size: 0.85rem;
    margin-top: 5px;
  }
  
  .form-control:focus {
    border-color: #212529;
    box-shadow: 0 0 0 0.25rem rgba(33, 37, 41, 0.25);
  }
  
  .btn-dark {
    background-color: #212529;
    border-color: #212529;
  }
  
  .btn-outline-dark {
    color: #212529;
    border-color: #212529;
  }
  
  .btn-outline-dark:hover {
    background-color: #212529;
    color: #fff;
  }
  
  .card {
    border-radius: 8px;
    border: 1px solid rgba(0,0,0,0.125);
  }
  
  .table th {
    font-weight: 600;
  }
</style>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script src="https://kit.fontawesome.com/16d4885483.js" crossorigin="anonymous"></script>

<script>
  function handleFormSubmit(event) {
    event.preventDefault();
    if (!validateForm()) {
      return;
    }
    
    const name = document.getElementsByName("name")[0].value;
    const description = document.getElementById("descriptionId").value;

    fetch('/admin/addCategory', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ name, description })
    })
      .then(response => {
        if (!response.ok) {
          return response.json().then(err => {
            throw new Error(err.error || 'Server error');
          });
        }
        return response.json();
      })
      .then(data => {
        Swal.fire({
          icon: 'success',
          title: 'Success',
          text: 'Category added successfully!',
          confirmButtonColor: '#212529',
          timer: 1500
        }).then(() => {
          location.reload();
        });
      })
      .catch(error => {
        if (error.message === "Category already exists") {
          Swal.fire({
            icon: 'error',
            text: "Category already exists",
            confirmButtonColor: '#212529'
          });
        } else {
          Swal.fire({
            icon: "error",
            title: "Oops",
            text: "An error occurred while adding the category",
            confirmButtonColor: '#212529'
          });
        }
      });
  }

  function validateForm() {
    clearErrorMessages();
    const name = document.getElementsByName("name")[0].value.trim();
    const description = document.getElementById("descriptionId").value.trim();
    let isValid = true;

    if (name === "") {
      displayErrorMessage("name-error", "Please enter a name");
      isValid = false;
    } else if (!/^[a-zA-Z\s]+$/.test(name)) {
      displayErrorMessage("name-error", "Category name should contain only alphabetic characters");
      isValid = false;
    }

    if (description === "") {
      displayErrorMessage("description-error", "Please enter a description");
      isValid = false;
    }
    return isValid;
  }

  function displayErrorMessage(elementId, message) {
    let errorElement = document.getElementById(elementId);
    errorElement.innerText = message;
    errorElement.style.display = "block";
  }

  function clearErrorMessages() {
    const errorElements = document.getElementsByClassName("error-message");
    Array.from(errorElements).forEach((element) => {
      element.innerText = '';
      element.style.display = 'none';
    });
  }

  async function addOffer(categoryId) {
    const today = new Date().toISOString().split('T')[0];
    const { value: formValues } = await Swal.fire({
      title: "Add Category Offer",
      html:
        '<p style="margin-bottom: 15px;">Set a discount for all products in this category. The offer will be active from start date to end date.</p>' +
        '<input id="swal-input2" type="number" class="swal2-input" placeholder="Discount Percentage (%)" min="1" max="100">' +
        '<input id="swal-input3" type="date" class="swal2-input" placeholder="Start Date" value="' + today + '">' +
        '<input id="swal-input4" type="date" class="swal2-input" placeholder="End Date">',
      focusConfirm: false,
      preConfirm: () => {
        return {
          percentage: document.getElementById('swal-input2').value,
          startDate: document.getElementById('swal-input3').value,
          endDate: document.getElementById('swal-input4').value,
        };
      },
      confirmButtonColor: '#212529',
    });

    if (formValues) {
      const { percentage, startDate, endDate } = formValues;
      if (!percentage || !startDate || !endDate) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid Input',
          text: 'All fields (Discount Percentage, Start Date, and End Date) are required!',
          confirmButtonColor: '#212529',
        });
        return;
      }

      const percentageNum = parseInt(percentage);
      if (percentageNum < 1 || percentageNum > 100) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid Input',
          text: 'Discount Percentage must be between 1 and 100!',
          confirmButtonColor: '#212529',
        });
        return;
      }

      const todayStr = new Date().toISOString().split('T')[0];
if (startDate < todayStr) {
  Swal.fire({
    icon: 'error',
    title: 'Invalid Input',
    text: 'Start Date cannot be in the past!',
    confirmButtonColor: '#212529',
  });
  return;
}


      if (endDate < startDate) {
  Swal.fire({
    icon: 'error',
    title: 'Invalid Input',
    text: 'End Date cannot be before Start Date!',
    confirmButtonColor: '#212529',
  });
  return;
}


      try {
        const response = await fetch("/admin/addCategoryOffer", {
          method: "POST",
          headers: {
            'Content-Type': "application/json",
          },
          body: JSON.stringify({
            percentage,
            startDate,
            endDate,
            categoryId,
          }),
        });

        const data = await response.json();
        if (response.ok && data.status === true) {
          Swal.fire({
            title: "Offer Added",
            text: "The category offer has been added successfully",
            icon: "success",
            confirmButtonColor: '#212529',
          });

          // Dynamically update the table row
          const offerPercentageCell = document.getElementById(`offer-percentage-${categoryId}`);
          const offerPeriodCell = document.getElementById(`offer-period-${categoryId}`);
          const offerButtonCell = document.getElementById(`offer-btn-${categoryId}`);

          offerPercentageCell.textContent = `${data.offer.discountPercentage}%`;
          offerPeriodCell.textContent = `${new Date(data.offer.startDate).toLocaleDateString()} - ${new Date(data.offer.endDate).toLocaleDateString()}`;
          offerButtonCell.innerHTML = `
            <button 
              class="btn btn-sm btn-danger" 
              onclick="removeOffer('${categoryId}')">
              Remove Offer
            </button>
          `;
        } else {
          Swal.fire({
            title: "Failed",
            text: data.message || "Adding offer failed",
            icon: "error",
            confirmButtonColor: '#212529',
          });
        }
      } catch (error) {
        Swal.fire({
          title: "Error",
          text: "An error occurred while adding the offer",
          icon: "error",
          confirmButtonColor: '#212529',
        });
        console.log("Error adding offer", error);
      }
    }
  }

  async function removeOffer(categoryId) {
    try {
      const response = await fetch("/admin/removeCategoryOffer", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          categoryId: categoryId,
        })
      });

      const data = await response.json();
      if (response.ok && data.status === true) {
        Swal.fire({
          title: "Offer Removed",
          text: "The category offer has been removed successfully",
          icon: "success",
          confirmButtonColor: '#212529',
        });

        // Dynamically update the table row
        const offerPercentageCell = document.getElementById(`offer-percentage-${categoryId}`);
        const offerPeriodCell = document.getElementById(`offer-period-${categoryId}`);
        const offerButtonCell = document.getElementById(`offer-btn-${categoryId}`);

        offerPercentageCell.textContent = '0%';
        offerPeriodCell.textContent = '-';
        offerButtonCell.innerHTML = `
          <button 
            class="btn btn-sm btn-success" 
            onclick="addOffer('${categoryId}')">
            Add Offer
          </button>
        `;
      } else {
        Swal.fire({
          title: "Failed",
          text: data.message || "Removing offer failed",
          icon: "error",
          confirmButtonColor: '#212529',
        });
      }
    } catch (error) {
      Swal.fire({
        title: "Error",
        text: "An error occurred while removing the offer",
        icon: "error",
        confirmButtonColor: '#212529',
      });
      console.error("Error removing offer", error);
    }
  }

  async function handleToggle(button) {
    const categoryId = button.dataset.id;
    const currentStatus = button.dataset.status;
    const action = currentStatus === 'Listed' ? 'unlistCategory' : 'listCategory';
    const actionLabel = currentStatus === 'Listed' ? 'unlist' : 'list';

    const confirmed = await Swal.fire({
      title: `Are you sure you want to ${actionLabel} this category?`,
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#212529',
      cancelButtonColor: '#6c757d',
      confirmButtonText: 'Yes, proceed!'
    });

    if (!confirmed.isConfirmed) return;

    try {
      const response = await fetch(`/admin/${action}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({ id: categoryId })
      });

      if (!response.ok) {
        throw new Error('Failed to update category status');
      }

      const data = await response.json();

      if (data.success) {
        const newStatus = currentStatus === 'Listed' ? 'Unlisted' : 'Listed';
        const badge = document.getElementById(`status-${categoryId}`);
        badge.textContent = newStatus;
        badge.className = `badge ${newStatus === 'Listed' ? 'bg-dark' : 'bg-secondary'}`;
        
        button.textContent = newStatus === 'Listed' ? 'Unlist' : 'List';
        button.className = `btn btn-sm ${newStatus === 'Listed' ? 'btn-outline-dark' : 'btn-dark'}`;
        button.dataset.status = newStatus;
        
        Swal.fire({
          icon: 'success',
          title: 'Status Updated',
          text: `Category has been ${actionLabel}ed successfully!`,
          confirmButtonColor: '#212529',
          timer: 1500
        });
      } else {
        throw new Error(data.message || 'Operation failed');
      }
    } catch (error) {
      console.error('Error:', error);
      Swal.fire({
        icon: 'error',
        title: 'Operation Failed',
        text: error.message || 'An error occurred while updating category status',
        confirmButtonColor: '#212529'
      });
    }
  }
</script>

<%- include("../../views/partials/admin/footer") %>