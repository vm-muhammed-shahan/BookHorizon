 <%- include("../../views/partials/admin/header") %>
    
<head>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css" />
  <style>
    .col-md-3 {
      padding: 20px;
      border: 1px solid #ddd;
      border-radius: 10px;
      margin: 10px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

    .form-label {
      margin-bottom: 8px;
      font-weight: 500;
    }

    .form-control {
      width: 100%;
      padding: 8px;
      margin-bottom: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      box-sizing: border-box;
    }

    .d-grid {
      margin-top: 20px;
    }

    .btn-primary {
      background-color: #007bff;
      color: #fff;
      border: 1px solid #007bff;
      border-radius: 5px;
      padding: 10px 20px;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .btn-primary:hover {
      background-color: #0056b3;
      border-color: #0056b3;
      transform: translateY(-2px);
    }

    .pagination-container {
      text-align: center;
      margin-top: 20px;
    }

    .pagination {
      display: inline-block;
    }

    .pagination a,
    .pagination .current-page {
      display: inline-block;
      padding: 5px 10px;
      margin: 0 2px;
      border: 1px solid #ddd;
      text-decoration: none;
      color: #333;
      border-radius: 3px;
    }

    .pagination a:hover {
      background-color: #f5f5f5;
    }

    .error-message {
      color: #dc3545;
      font-size: 0.85rem;
      margin-top: 5px;
    }
    
    .table-responsive {
      border-radius: 8px;
      overflow: hidden;
      box-shadow: 0 0 10px rgba(0,0,0,0.05);
    }
    
    .table th {
      background-color: #f8f9fa;
    }
    
    .btn-action {
      min-width: 70px;
    }
    
    .search-container {
      margin-bottom: 20px;
    }
    
    .badge { 
      font-weight: 500;
      letter-spacing: 0.5px;
    }
  </style>
</head>

<body>
  <section class="content-main">
    <div class="content-header">
      <div>
        <h2 class="content-title card-title">Category Management</h2>
      </div>
    </div>
    
    <header class="card-header text-center mb-20">
      <form action="/admin/category" method="get" class="d-inline search-container">
        <div class="input-group input-group-sm border border-1 border-grey rounded-pill" style="width: 500px; margin-left: 230px; overflow: hidden;">
          <input 
            type="text" 
            class="form-control border-0 rounded-start-pill" 
            placeholder="Search categories..." 
            name="search" 
            value="<%= search || '' %>"
          >
          <div class="input-group-append d-flex align-items-center">
            <button class="btn border-0 px-3" type="submit" style="background-color: transparent;">Search</button>
            <% if (search) { %>
              <a href="/admin/category" class="btn border-0 px-3" style="background-color: transparent;">Clear</a>
            <% } %>
          </div>
        </div>
      </form>
    </header>
     
    <div class="card">
      <div class="card-body">
        <div class="row">
          <!-- Create Category Form -->
          <div class="col-md-3">
            <form method="post" action="/admin/addCategory" onsubmit="return handleFormSubmit(event)">
              <div class="mb-4">
                <label for="product_name" class="form-label">Name</label>
                <input type="text" name="name" placeholder="Type here" class="form-control" id="product_name" required />
                <div id="name-error" class="error-message"></div>
              </div>
              <div class="mb-4">
                <label class="form-label">Description</label>
                <textarea placeholder="Type here" name="description" class="form-control" id="descriptionId" required></textarea>
                <div id="description-error" class="error-message"></div>
              </div>
              <div class="d-grid">
                <button class="btn btn-primary" type="submit">
                  Create category
                </button>
              </div>
            </form>
          </div>
          
          <!-- Categories Table -->
          <div class="col-md-8 ml-10">
            <div class="table-responsive">
              <table class="table table-hover">
                <thead>
                  <tr>
                     <th class="text-center">#</th>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Offer Price</th>
                    <th>Status</th>
                    <th>List/Unlist</th>
                    <th class="text-start">Edit</th>
                  </tr>
                </thead>
                <tbody>
                  <% cat.forEach((category, index) => { %>
                    <tr>
                      <td class="text-center"><%= index + 1 %></td>
                      <td class="text-start">
                        <%= category.name %>
                      </td>
                      <td class="text-start">
                        <%= category.description %>
                      </td>
                      <td>
                        <% if(category.categoryOffer) { %>
                          <%= category.categoryOffer %>%
                        <% } else { %>
                          0%
                        <% } %>
                      </td>
                      <td class="text-start">
                        <span id="status-<%= category._id %>" 
                              class="badge rounded-pill <%= category.isListed ? 'alert-success' : 'alert-danger' %>" 
                              style="width: 60px">
                          <%= category.isListed ? 'Listed' : 'Unlisted' %>
                        </span>
                      </td>
                      <td class="text-start">
                        <button 
                          id="toggle-btn-<%= category._id %>" 
                          class="btn btn-sm btn-<%= category.isListed ? 'danger' : 'success' %> btn-action" 
                          style="width: 70px" 
                          data-id="<%= category._id %>"
                          data-status="<%= category.isListed ? 'Listed' : 'Unlisted' %>"
                          onclick="handleToggle(this)">
                          <%= category.isListed ? 'Unlist' : 'List' %>
                        </button>
                      </td>
                      <td class="text-start">
                        <a href="/admin/editCategory?id=<%= category._id %>" class="btn btn-sm btn-info text-white">Edit</a>
                      </td>
                    </tr>
                  <% }) %>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Pagination -->
    <div class="pagination-container">
      <% if (currentPage > 1) { %>
        <a href="?page=<%= currentPage - 1 %><%= search ? '&search=' + search : '' %>">&laquo; Previous</a>
      <% } %>

      <% for (let i = 1; i <= totalPages; i++) { %>
        <% if (i === currentPage) { %>
          <span class="current-page"><%= i %></span>
        <% } else { %>
          <a href="?page=<%= i %><%= search ? '&search=' + search : '' %>"><%= i %></a>
        <% } %>
      <% } %>


      <% if (currentPage < totalPages) { %>
        <a href="?page=<%= currentPage + 1 %><%= search ? '&search=' + search : '' %>">Next &raquo;</a>
      <% } %>
    </div>
  </section>
  
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
  <script>
    function handleFormSubmit(event) {
      event.preventDefault();
      if (!validateForm()) {
        return;
      }
      
      const name = document.getElementsByName("name")[0].value;
      const description = document.getElementById("descriptionId").value;

      fetch('/admin/addCategory', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ name, description })
      })
        .then(response => {
          if (!response.ok) {
            return response.json().then(err => {
              throw new Error(err.error || 'Server error');
            });
          }
          return response.json();
        })
        .then(data => {
          Swal.fire({
            icon: 'success',
            title: 'Success',
            text: 'Category added successfully!',
            timer: 1500
          }).then(() => {
            location.reload();
          });
        })
        .catch(error => {
          if (error.message === "Category already exists") {
            Swal.fire({
              icon: 'error',
              text: "Category already exists"
            });
          } else {
            Swal.fire({
              icon: "error",
              title: "Oops",
              text: "An error occurred while adding the category",
            });
          }
        });
    }

    function validateForm() {
      clearErrorMessages();
      const name = document.getElementsByName("name")[0].value.trim();
      const description = document.getElementById("descriptionId").value.trim();
      let isValid = true;

      if (name === "") {
        displayErrorMessage("name-error", "Please enter a name");
        isValid = false;
      } else if (!/^[a-zA-Z\s]+$/.test(name)) {
        displayErrorMessage("name-error", "Category name should contain only alphabetic characters");
        isValid = false;
      }

      if (description === "") {
        displayErrorMessage("description-error", "Please enter a description");
        isValid = false;
      }
      return isValid;
    }

    function displayErrorMessage(elementId, message) {
      let errorElement = document.getElementById(elementId);
      errorElement.innerText = message;
      errorElement.style.display = "block";
    }

    function clearErrorMessages() {
      const errorElements = document.getElementsByClassName("error-message");
      Array.from(errorElements).forEach((element) => {
        element.innerText = '';
        element.style.display = 'none';
      });
    }

    async function addOffer(categoryId) {
      const { value: amount } = await Swal.fire({
        title: "Offer in percentage",
        input: "number",
        inputLabel: "Percentage",
        inputPlaceholder: "%",
      });

      if (amount) {
        try {
          const response = await fetch("/admin/addCategoryOffer", {
            method: "POST",
            headers: {
              'Content-Type': "application/json",
            },
            body: JSON.stringify({
              percentage: amount,
              categoryId: categoryId,
            }),
          });

          const data = await response.json();
          if (response.ok && data.status === true) {
            Swal.fire(
              "Offer added",
              "The offer has been added successfully",
              "success"
            ).then(() => {
              location.reload();
            });
          } else {
            Swal.fire("Failed", data.message || "Adding offer failed", "error");
          }
        } catch (error) {
          Swal.fire(
            "Error",
            "An error occurred while adding the offer",
            "error"
          );
          console.log("Error adding offer", error);
        }
      }
    }

    async function removeOffer(categoryId) {
      try {
        const response = await fetch("/admin/removeCategoryOffer", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            categoryId: categoryId,
          })
        });

        const data = await response.json();
        if (response.ok && data.status === true) {
          Swal.fire(
            "Offer removed",
            "The offer has been removed successfully",
            "success"
          ).then(() => {
            location.reload();
          });
        } else {
          Swal.fire("Failed", data.message || "Removing offer failed", "error");
        }
      } catch (error) {
        Swal.fire(
          "Error",
          "An error occurred while removing the offer",
          "error"
        );
        console.error("Error removing offer", error);
      }
    }

    async function handleToggle(button) {
      const categoryId = button.dataset.id;
      const currentStatus = button.dataset.status;
      const action = currentStatus === 'Listed' ? 'unlistCategory' : 'listCategory';
      const actionLabel = currentStatus === 'Listed' ? 'unlist' : 'list';

      const confirmed = await Swal.fire({
        title: `Are you sure you want to ${actionLabel} this category?`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, proceed!'
      });

      if (!confirmed.isConfirmed) return;

      try {
        const response = await fetch(`/admin/${action}`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({ id: categoryId })
        });

        if (!response.ok) {
          throw new Error('Failed to update category status');
        }

        const data = await response.json();

        if (data.success) {
          // Update the new status
          const newStatus = currentStatus === 'Listed' ? 'Unlisted' : 'Listed';
          
          // Update badge
          const badge = document.getElementById(`status-${categoryId}`);
          badge.textContent = newStatus;
          badge.className = `badge rounded-pill ${newStatus === 'Listed' ? 'alert-success' : 'alert-danger'}`;
          badge.style.width = '60px';

          // Update button
          button.textContent = newStatus === 'Listed' ? 'Unlist' : 'List';
          button.className = `btn btn-sm btn-${newStatus === 'Listed' ? 'danger' : 'success'} btn-action`;
          button.dataset.status = newStatus;
          
          // Show success message
          Swal.fire({
            icon: 'success',
            title: 'Status Updated',
            text: `Category has been ${actionLabel}ed successfully!`,
            timer: 1500
          });
        } else {
          throw new Error(data.message || 'Operation failed');
        }
      } catch (error) {
        console.error('Error:', error);
        Swal.fire({
          icon: 'error',
          title: 'Operation Failed',
          text: error.message || 'An error occurred while updating category status'
        });
      }
    }
  </script>

<%- include("../../views/partials/admin/footer") %>