<%- include('../partials/admin/header') %>

    <style>
        /* Existing styles remain unchanged */
        .search-container {
            display: flex;
            gap: 10px;
            margin-bottom: 1rem;
            align-items: center;
        }

        .search-input {
            flex: 1;
        }

        .btn-search,
        .btn-clear,
        .btn-add-coupon {
            padding: 0.375rem 0.75rem;
            font-size: 0.875rem;
            line-height: 1.5;
            border-radius: 0.2rem;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .btn-search {
            background-color: #007bff;
            color: white;
            border: 1px solid #007bff;
        }

        .btn-search:hover {
            background-color: #0056b3;
            border-color: #004085;
        }

        .btn-clear {
            background-color: #dc3545;
            color: white;
            border: 1px solid #dc3545;
        }

        .btn-clear:hover {
            background-color: #b02a37;
            border-color: #a52834;
        }

        .btn-clear:disabled {
            background-color: #e0e0e0;
            border-color: #d6d6d6;
            color: #6c757d;
            cursor: not-allowed;
        }

        .btn-add-coupon {
            background-color: #28a745;
            color: white;
            border: 1px solid #28a745;
        }

        .btn-add-coupon:hover {
            background-color: #218838;
            border-color: #1e7e34;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(4px);
        }

        .modal.show {
            display: flex;
            align-items: center;
            justify-content: center;
            animation: fadeIn 0.3s ease;
        }

        .modal-content {
            background: #fff;
            border-radius: 8px;
            width: 90%;
            max-width: 500px;
            padding: 1.5rem;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            animation: slideIn 0.3s ease;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .modal-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #000;
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #666;
            padding: 0;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            transition: all 0.3s ease;
        }

        .close-btn:hover {
            background: #f0f0f0;
            color: #000;
        }

        .form-group {
            margin-bottom: 1rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #333;
        }

        .form-input {
            width: 100%;
            padding: 0.75rem;
            border: 2px solid #e0e0e0;
            border-radius: 4px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        .form-input:focus {
            outline: none;
            border-color: #000;
        }

        .form-input.error {
            border-color: #dc3545;
            box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
        }

        .form-input.success {
            border-color: #28a745;
            box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25);
        }

        .error-message {
            color: #dc3545;
            font-size: 0.875rem;
            margin-top: 0.25rem;
            display: none;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
            }

            to {
                opacity: 1;
            }
        }

        @keyframes slideIn {
            from {
                transform: translateY(-50px);
                opacity: 0;
            }

            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        @media (max-width: 768px) {
            .modal-content {
                width: 95%;
                margin: 1rem;
            }
        }

        /* Edit Coupon Modal */
        #editCouponModal .modal-content {
            background: #fff;
            border-radius: 8px;
            width: 90%;
            max-width: 500px;
            padding: 1.5rem;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            animation: slideIn 0.3s ease;
        }

        #editCouponModal h2 {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 1rem;
            color: #000;
        }

        #editCouponModal label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #333;
        }

        #editCouponModal input {
            width: 100%;
            padding: 0.75rem;
            border: 2px solid #e0e0e0;
            border-radius: 4px;
            font-size: 1rem;
            margin-bottom: 1rem;
            transition: border-color 0.3s ease;
        }

        #editCouponModal input:focus {
            outline: none;
            border-color: #000;
        }

        #editCouponModal .close {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #666;
            position: absolute;
            top: 15px;
            right: 15px;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            transition: all 0.3s ease;
        }

        #editCouponModal .close:hover {
            background: #f0f0f0;
            color: #000;
        }

        #editCouponModal button {
            padding: 0.6rem 1.2rem;
            border-radius: 4px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        #editCouponModal #updateCouponBtn {
            background-color: #007bff;
            color: white;
            border: 1px solid #007bff;
        }

        #editCouponModal #updateCouponBtn:hover {
            background-color: #0056b3;
            border-color: #004085;
        }

        #editCouponModal .btn-secondary {
            background-color: #6c757d;
            color: white;
            border: 1px solid #6c757d;
        }

        #editCouponModal .btn-secondary:hover {
            background-color: #5a6268;
            border-color: #545b62;
        }
    </style>

    <div class="container-fluid mt-4">
        <h1 class="mb-4">Coupon Management</h1>

        <!-- Add Coupon Button -->
        <div class="mb-4">
            <button type="button" class="btn-add-coupon" id="openCouponModalBtn">Add New Coupon</button>
        </div>

        <!-- Coupon List -->
        <div class="card">
            <div class="card-header">
                <h5>Coupon List</h5>
            </div>
            <div class="card-body">
                <div class="search-container">
                    <input type="text" id="searchInput" class="form-control search-input"
                        placeholder="Search by coupon code...">
                    <button type="button" id="searchButton" class="btn btn-search">Search</button>
                    <button type="button" id="clearButton" class="btn btn-clear" disabled>Clear Search</button>
                </div>
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Coupon Code</th>
                            <th>Discount Percentage (%)</th>
                            <th>Minimum Purchase (₹)</th>
                            <th>Created On</th>
                            <th>Expires On</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="couponTable">
                        <% coupons.forEach(coupon=> { %>
                            <tr>
                                <td>
                                    <%= coupon.name %>
                                </td>
                                <td>
                                    <%= coupon.discountPercentage ? coupon.discountPercentage.toFixed(2) : 'N/A' %>%
                                </td>
                                <td>₹<%= coupon.minimumPrice ? coupon.minimumPrice.toFixed(2) : 'N/A' %>
                                </td>
                                <td>
                                    <%= new Date(coupon.createdOn).toLocaleDateString('en-GB', {
                                        timeZone: 'Asia/Kolkata' }) %>
                                </td>
                                <td>
                                    <%= new Date(coupon.expireOn).toLocaleDateString('en-GB', { timeZone: 'Asia/Kolkata'
                                        }) %>
                                </td>
                                <td>
                                    <%= coupon.islist ? 'Active' : 'Inactive' %>
                                </td>
                                <td>
                                    <% if (new Date(coupon.expireOn)> new Date()) { %>
                                        <button class="btn btn-sm btn-danger"
                                            onclick="deleteCoupon('<%= coupon._id %>')">
                                            <%= coupon.islist ? 'Delete' : 'Restore' %>
                                        </button>
                                        <button class="btn btn-sm btn-warning"
                                            onclick="openEditModal('<%= coupon._id %>','<%= coupon.name %>','<%= coupon.discountPercentage %>','<%= coupon.minimumPrice %>','<%= coupon.expireOn.toISOString().split('T')[0] %>')">
                                            Edit
                                        </button>
                                        <% } else { %>
                                            <span class="text-muted">Expired</span>
                                            <% } %>
                                </td>

                            </tr>
                            <% }) %>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Coupon Modal -->
    <div id="couponModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">Create New Coupon</h2>
                <button type="button" class="close-btn" id="closeCouponModalBtn">×</button>
            </div>
            <form id="createCouponForm">
                <div class="modal-body">
                    <div id="modalMessage"></div>
                    <div class="form-group">
                        <label for="couponName" class="form-label">Coupon Code</label>
                        <input type="text" class="form-input" id="couponName" name="name" required>
                        <div id="couponNameError" class="error-message">Coupon code is required and must be 3-20
                            characters (uppercase letters, numbers, underscores only).</div>
                    </div>
                    <div class="form-group">
                        <label for="discountPercentage" class="form-label">Discount Percentage (%)</label>
                        <input type="number" class="form-input" id="discountPercentage" name="discountPercentage"
                            min="0.01" max="100" step="0.01" required>
                        <div id="discountPercentageError" class="error-message">Discount must be between 0.01% and 100%.
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="minimumPrice" class="form-label">Minimum Purchase (₹)</label>
                        <input type="number" class="form-input" id="minimumPrice" name="minimumPrice" min="0.01"
                            step="0.01" required>
                        <div id="minimumPriceError" class="error-message">Minimum purchase must be greater than 0.</div>
                    </div>
                    <div class="form-group">
                        <label for="expireOn" class="form-label">Expiry Date</label>
                        <input type="date" class="form-input" id="expireOn" name="expireOn" required>
                        <div id="expireOnError" class="error-message">Expiry date must be a future date.</div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" id="cancelCouponBtn">Cancel</button>
                    <button type="submit" class="btn btn-primary" id="saveCouponBtn">Create Coupon</button>
                </div>
            </form>
        </div>
    </div>

    <!--Edit Coupon Modal -->
    <div id="editCouponModal" class="modal">
        <div class="modal-content relative">
            <button type="button" class="close" id="closeEditCouponModalBtn">&times;</button>
            <h2 class="modal-title">Edit Coupon</h2>
            <form id="editCouponForm">
                <input type="hidden" id="editCouponId" name="couponId">

                <div class="form-group">
                    <label for="editCouponName">Coupon Code:</label>
                    <input type="text" id="editCouponName" name="name" required>
                </div>

                <div class="form-group">
                    <label for="editDiscountPercentage">Discount %:</label>
                    <input type="number" id="editDiscountPercentage" name="discountPercentage" required>
                </div>

                <div class="form-group">
                    <label for="editMinimumPrice">Minimum Price:</label>
                    <input type="number" id="editMinimumPrice" name="minimumPrice" required>
                </div>

                <div class="form-group">
                    <label for="editExpireOn">Expiry Date:</label>
                    <input type="date" id="editExpireOn" name="expireOn" required>
                </div>

                <div id="editModalMessage"></div>

                <div class="modal-footer" style="margin-top: 1rem; text-align: right;">
                    <button type="submit" id="updateCouponBtn">Update Coupon</button>
                    <button type="button" class="btn btn-secondary" id="cancelEditCouponBtn">Cancel</button>
                </div>
            </form>
        </div>
    </div>



    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>

        function formatDate(dateString) {
            const date = new Date(dateString);
            const day = String(date.getDate()).padStart(2, '0');
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const year = date.getFullYear();
            return `${day}/${month}/${year}`;
        }


        function filterCoupons() {
            const searchValue = document.getElementById('searchInput').value.trim().toLowerCase();
            const rows = document.querySelectorAll('#couponTable tr');
            const clearButton = document.getElementById('clearButton');

            if (!searchValue) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Warning',
                    text: 'Please enter a coupon code to search.',
                    confirmButtonColor: '#3085d6'
                });
                return;
            }

            let matchFound = false;
            rows.forEach(row => {
                const couponCode = row.cells[0].textContent.toLowerCase();
                const isMatch = couponCode === searchValue;
                row.style.display = isMatch ? '' : 'none';
                if (isMatch) matchFound = true;
            });

            if (!matchFound) {
                Swal.fire({
                    icon: 'info',
                    title: 'No Match',
                    text: 'No coupon found with the exact code: ' + searchValue.toUpperCase(),
                    confirmButtonColor: '#3085d6'
                });
            }

            clearButton.disabled = false;
        }


        function clearSearch() {
            const searchInput = document.getElementById('searchInput');
            const clearButton = document.getElementById('clearButton');

            searchInput.value = '';
            clearButton.disabled = true;
            window.location.reload();
        }


        document.getElementById('searchButton').addEventListener('click', filterCoupons);
        document.getElementById('clearButton').addEventListener('click', clearSearch);


        const modal = document.getElementById('couponModal');
        const openModalBtn = document.getElementById('openCouponModalBtn');
        const closeModalBtn = document.getElementById('closeCouponModalBtn');
        const cancelBtn = document.getElementById('cancelCouponBtn');

        openModalBtn.addEventListener('click', () => {
            modal.classList.add('show');
            document.body.style.overflow = 'hidden';
        });

        closeModalBtn.addEventListener('click', closeModal);
        cancelBtn.addEventListener('click', closeModal);

        function closeModal() {
            modal.classList.remove('show');
            document.body.style.overflow = 'auto';
            const form = document.getElementById('createCouponForm');
            form.reset();
            document.querySelectorAll('.form-input').forEach(input => {
                input.classList.remove('error', 'success');
            });
            document.querySelectorAll('.error-message').forEach(error => {
                error.style.display = 'none';
            });
            document.getElementById('modalMessage').innerHTML = '';
        }


        function validateField(inputId, value, rules) {
            const input = document.getElementById(inputId);
            const errorElement = document.getElementById(`${inputId}Error`);
            let isValid = true;

            if (rules.required && !value) {
                showError(inputId, `${inputId.replace('coupon', '').charAt(0).toUpperCase() + inputId.replace('coupon', '').slice(1)} is required`);
                return false;
            }

            switch (inputId) {
                case 'couponName':
                    if (value.length < 3 || value.length > 20 || !/^[A-Z0-9_]+$/.test(value)) {
                        showError(inputId, 'Coupon code must be 3-20 characters (uppercase letters, numbers, underscores only)');
                        isValid = false;
                    }
                    break;
                case 'discountPercentage':
                    const discount = parseFloat(value);
                    if (isNaN(discount) || discount < 0.01 || discount > 100) {
                        showError(inputId, 'Discount must be between 0.01% and 100%');
                        isValid = false;
                    }
                    break;
                case 'minimumPrice':
                    const price = parseFloat(value);
                    if (isNaN(price) || price <= 0) {
                        showError(inputId, 'Minimum purchase must be greater than 0');
                        isValid = false;
                    }
                    break;
                case 'expireOn':
                    const expireDate = new Date(value);
                    const today = new Date();
                    today.setHours(0, 0, 0, 0);
                    if (isNaN(expireDate.getTime()) || expireDate <= today) {
                        showError(inputId, 'Expiry date must be a future date');
                        isValid = false;
                    }
                    break;
            }

            if (isValid) {
                input.classList.remove('error');
                input.classList.add('success');
                errorElement.style.display = 'none';
            }
            return isValid;
        }

        function showError(inputId, message) {
            const input = document.getElementById(inputId);
            const errorElement = document.getElementById(`${inputId}Error`);
            input.classList.remove('success');
            input.classList.add('error');
            errorElement.textContent = message;
            errorElement.style.display = 'block';
        }


        document.getElementById('createCouponForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const form = e.target;
            const couponName = document.getElementById('couponName').value.trim().toUpperCase();
            const discountPercentage = document.getElementById('discountPercentage').value;
            const minimumPrice = document.getElementById('minimumPrice').value;
            const expireOn = document.getElementById('expireOn').value;
            let isValid = true;


            document.querySelectorAll('.form-input').forEach(input => {
                input.classList.remove('error', 'success');
            });
            document.querySelectorAll('.error-message').forEach(error => {
                error.style.display = 'none';
            });
            document.getElementById('modalMessage').innerHTML = '';


            isValid &= validateField('couponName', couponName, { required: true });
            isValid &= validateField('discountPercentage', discountPercentage, { required: true });
            isValid &= validateField('minimumPrice', minimumPrice, { required: true });
            isValid &= validateField('expireOn', expireOn, { required: true });

            if (!isValid) {
                document.getElementById('modalMessage').innerHTML = '<div class="alert alert-danger">Please fix the errors above before submitting.</div>';
                return;
            }

            const formData = new FormData(form);
            const couponData = Object.fromEntries(formData);

            const submitBtn = document.getElementById('saveCouponBtn');
            const originalText = submitBtn.textContent;
            submitBtn.disabled = true;
            submitBtn.textContent = 'Creating...';
            const messageDiv = document.getElementById('modalMessage');
            messageDiv.innerHTML = '';

            try {
                const response = await fetch('/admin/coupons/create', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(couponData)
                });
                const result = await response.json();

                if (result.success) {
                    await Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Coupon created successfully!',
                        confirmButtonColor: '#3085d6'
                    });
                    closeModal();
                    window.location.reload();
                } else {
                    messageDiv.innerHTML = `<div class="alert alert-danger">${result.error}</div>`;
                }
            } catch (error) {
                console.error('Error creating coupon:', error);
                messageDiv.innerHTML = `<div class="alert alert-danger">Server error. Please try again.</div>`;
            } finally {
                submitBtn.disabled = false;
                submitBtn.textContent = originalText;
            }
        });


        ['couponName', 'discountPercentage', 'minimumPrice', 'expireOn'].forEach(field => {
            document.getElementById(field).addEventListener('input', () => {
                const value = field === 'couponName' ? document.getElementById(field).value.trim().toUpperCase() : document.getElementById(field).value;
                validateField(field, value, { required: true });
            });
            document.getElementById(field).addEventListener('blur', () => {
                const value = field === 'couponName' ? document.getElementById(field).value.trim().toUpperCase() : document.getElementById(field).value;
                validateField(field, value, { required: true });
            });
        });

        async function deleteCoupon(couponId) {
            const action = document.querySelector(`button[onclick="deleteCoupon('${couponId}')"]`).textContent.trim();
            const isDelete = action === 'Delete';

            const result = await Swal.fire({
                title: `Are you sure you want to ${isDelete ? 'delete' : 'restore'} this coupon?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: `Yes, ${isDelete ? 'delete' : 'restore'} it!`
            });

            if (result.isConfirmed) {
                try {
                    const response = await fetch(`/admin/coupons/delete/${couponId}`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ islist: !isDelete })
                    });
                    const result = await response.json();

                    if (result.success) {
                        await Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: `Coupon ${isDelete ? 'deleted' : 'restored'} successfully!`,
                            confirmButtonColor: '#3085d6'
                        });
                        window.location.reload();
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: result.error,
                            confirmButtonColor: '#3085d6'
                        });
                    }
                } catch (error) {
                    console.error('Error deleting/restoring coupon:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Server error. Please try again.',
                        confirmButtonColor: '#3085d6'
                    });
                }
            }
        }


        const editModal = document.getElementById('editCouponModal');
        const closeEditModalBtn = document.getElementById('closeEditCouponModalBtn');

        function openEditModal(id, name, discount, minPrice, expiry) {
            editModal.classList.add('show');
            document.body.style.overflow = 'hidden';

            document.getElementById('editCouponId').value = id;
            document.getElementById('editCouponName').value = name;
            document.getElementById('editDiscountPercentage').value = discount;
            document.getElementById('editMinimumPrice').value = minPrice;
            document.getElementById('editExpireOn').value = expiry;
        }

        closeEditModalBtn.addEventListener('click', closeEditModal);

        function closeEditModal() {
            editModal.classList.remove('show');
            document.body.style.overflow = 'auto';
            document.getElementById('editCouponForm').reset();
            document.getElementById('editModalMessage').innerHTML = '';
        }

        const cancelEditBtn = document.getElementById('cancelEditCouponBtn');
        cancelEditBtn.addEventListener('click', closeEditModal);


        // Handle Edit form submission
        document.getElementById('editCouponForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const id = document.getElementById('editCouponId').value;
            const updatedData = {
                name: document.getElementById('editCouponName').value.trim().toUpperCase(),
                discountPercentage: document.getElementById('editDiscountPercentage').value,
                minimumPrice: document.getElementById('editMinimumPrice').value,
                expireOn: document.getElementById('editExpireOn').value
            };

            const submitBtn = document.getElementById('updateCouponBtn');
            const originalText = submitBtn.textContent;
            submitBtn.disabled = true;
            submitBtn.textContent = 'Updating...';
            const messageDiv = document.getElementById('editModalMessage');
            messageDiv.innerHTML = '';

            try {
                const response = await fetch(`/admin/coupons/${id}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(updatedData)
                });
                const result = await response.json();

                if (result.success) {
                    await Swal.fire({
                        icon: 'success',
                        title: 'Updated',
                        text: 'Coupon updated successfully!',
                        confirmButtonColor: '#3085d6'
                    });
                    closeEditModal();
                    window.location.reload();
                } else {
                    messageDiv.innerHTML = `<div class="alert alert-danger">${result.error}</div>`;
                }
            } catch (error) {
                console.error('Error updating coupon:', error);
                messageDiv.innerHTML = `<div class="alert alert-danger">Server error. Please try again.</div>`;
            } finally {
                submitBtn.disabled = false;
                submitBtn.textContent = originalText;
            }
        });

    </script>

    <%- include('../partials/admin/footer') %>