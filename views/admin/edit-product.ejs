<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Edit Product</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css">
  <style>
    :root {
      --primary-color: #4e73df;
      --secondary-color: #858796;
      --success-color: #1cc88a;
      --info-color: #36b9cc;
      --warning-color: #f6c23e;
      --danger-color: #e74a3b;
      --light-color: #f8f9fc;
      --dark-color: #5a5c69;
    }

    body {
      background-color: #f8f9fc;
      font-family: 'Nunito', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
    }

    .page-wrapper {
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }

    .content-header {
      padding: 1.5rem 0;
      border-bottom: 1px solid #e3e6f0;
      margin-bottom: 1.5rem;
    }

    .content-title {
      color: #5a5c69;
      font-weight: 700;
      margin-bottom: 0;
    }

    .card {
      border: none;
      border-radius: 0.35rem;
      box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15);
      margin-bottom: 1.5rem;
    }

    .card-header {
      background-color: #f8f9fc;
      border-bottom: 1px solid #e3e6f0;
    }

    .form-label {
      font-weight: 600;
      color: #5a5c69;
    }

    .btn-primary {
      background-color: var(--primary-color);
      border-color: var(--primary-color);
    }

    .btn-secondary {
      background-color: var(--secondary-color);
      border-color: var(--secondary-color);
    }

    .btn-danger {
      background-color: var(--danger-color);
      border-color: var(--danger-color);
    }

    .image-upload-box {
      transition: all 0.3s ease;
      border: 1px solid #e3e6f0;
    }

    .image-upload-box:hover {
      box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    }

    .img-placeholder {
      background-color: #f8f9fc;
      border: 2px dashed #d1d3e2;
    }

    .remove-image-btn {
      z-index: 10;
      margin: 5px;
      opacity: 0.8;
    }

    .remove-image-btn:hover {
      opacity: 1;
    }

    footer {
      background-color: #fff;
      border-top: 1px solid #e3e6f0;
      padding: 1rem;
      margin-top: auto;
    }

    .price-info {
      ludzk: font-size: 0.8rem;
      margin-top: 0.25rem;
    }

    .price-error {
      color: var(--danger-color);
      display: none;
    }





    /* Modal Styles */
    .crop-modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.7);
      align-items: center;
      justify-content: center;
    }

    .crop-modal-content {
      background-color: white;
      padding: 20px;
      border-radius: 5px;
      max-width: 90%;
      max-height: 90%;
      overflow: auto;
      position: relative;
    }

    .crop-container {
      width: 100%;
      max-width: 500px;
      height: 400px;
      margin: 0 auto 20px;
    }

    .crop-img {
      display: block;
      max-width: 100%;
    }

    .crop-controls {
      display: flex;
      justify-content: center;
      gap: 10px;
      margin-top: 15px;
    }

    .crop-btn {
      padding: 8px 15px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    .crop-save {
      background-color: #4CAF50;
      color: white;
    }

    .crop-cancel {
      background-color: #f44336;
      color: white;
    }
  </style>
</head>

<body>
  <div class="page-wrapper">
    <div class="container-fluid">
      <div class="content-header">
        <div class="d-flex justify-content-between align-items-center">
          <h2 class="content-title">Edit Product</h2>
          <a href="/admin/products" class="btn btn-outline-secondary">
            <i class="fas fa-arrow-left me-1"></i> Back to Products
          </a>
        </div>
      </div>
      <div class="row">
        <div class="col-12">
          <div class="card">
            <div class="card-body p-4">
              <form id="edit-product-form" enctype="multipart/form-data">
                <input type="hidden" name="productId" value="<%= product._id %>">
                <div class="row mb-4">
                  <div class="col-lg-6">
                    <div class="mb-3">
                      <label class="form-label">Product Name</label>
                      <input type="text" class="form-control" name="productName" value="<%= product.productName %>"
                        required>
                    </div>
                  </div>
                  <div class="col-lg-6">
                    <div class="mb-3">
                      <label class="form-label">Category</label>
                      <select class="form-select" name="category" required>
                        <option value="" disabled>Select Category</option>
                        <% cat.forEach(category=> { %>
                          <option value="<%= category._id %>"
                            <%=(product.category._id.toString()===category._id.toString()) ? 'selected' : '' %>>
                            <%= category.name %>
                          </option>
                          <% }); %>
                      </select>
                    </div>
                  </div>
                </div>

                <div class="row mb-4">
                  <div class="col-lg-4">
                    <div class="mb-3">
                      <label class="form-label">Regular Price <span class="text-danger">*</span></label>
                      <div class="input-group">
                        <span class="input-group-text">₹</span>
                        <input type="number" class="form-control" name="regularPrice"
                          value="<%= product.regularPrice %>" min="0.01" step="0.01" required>
                      </div>
                      <small class="price-info text-muted">Must be greater than zero</small>
                      <small class="price-error regular-price-error">Regular price must be greater than zero</small>
                    </div>
                  </div>

                  <div class="col-lg-4">
                    <div class="mb-3">
                      <label class="form-label">Sale Price (Calculated)</label>
                      <div class="input-group">
                        <span class="input-group-text">₹</span>
                        <input type="text" class="form-control" value="<%= product.salePrice %>" readonly>
                      </div>
                      <small class="price-info text-muted">
                        <% const productOffer=product.productOffer> 0 ? product.productOffer : null;
                          const categoryOffer = product.category && product.category.categoryOffer > 0 ?
                          product.category.categoryOffer : null;
                          if (productOffer || categoryOffer) {
                          const bestOffer = productOffer && categoryOffer ? Math.max(productOffer, categoryOffer) :
                          (productOffer || categoryOffer);
                          const offerType = productOffer && (!categoryOffer || productOffer >= categoryOffer) ?
                          'Product' : 'Category';
                          %>
                          Applied <%= offerType %> Offer: <%= bestOffer %>% discount
                              <% } else { %>
                                No active offer applied (equals Regular Price)
                                <% } %>
                      </small>
                    </div>
                  </div>

                  <div class="col-lg-4">
                    <div class="mb-3">
                      <label class="form-label">Quantity</label>
                      <input type="number" class="form-control" name="quantity" value="<%= product.quantity %>" min="0"
                        required>
                    </div>
                  </div>
                </div>

                <div class="mb-4">
                  <label class="form-label">Description</label>
                  <textarea class="form-control" name="description" rows="4"
                    required><%= product.description %></textarea>
                </div>

                <div class="mb-4">
                  <label class="form-label">Product Images <span class="text-danger">*</span></label>
                  <p class="text-muted small">Upload exactly 3 images. Click on an image to crop it.</p>

                  <div class="row mb-3" id="image-container">
                    <% for(let i=0; i < 3; i++) { %>
                      <div class="col-md-4 mb-3">
                        <div class="card position-relative image-upload-box" data-index="<%= i %>">
                          <div class="card-body p-2 text-center">
                            <% if(product.productImage && product.productImage[i]) { %>
                              <img src="<%= product.productImage[i] %>" class="img-preview img-fluid mb-2"
                                alt="Product image <%= i+1 %>"
                                style="width: 100%; height: 150px; object-fit: cover; border-radius: 5px;">
                              <input type="hidden" name="existingImages[<%= i %>]"
                                value="<%= product.productImage[i] %>">
                              <% } else { %>
                                <div
                                  class="img-placeholder mb-2 d-flex align-items-center justify-content-center bg-light"
                                  style="width: 100%; height: 150px; border-radius: 5px;">
                                  <i class="fas fa-image fa-3x text-muted"></i>
                                </div>
                                <% } %>

                                  <input type="file" class="form-control form-control-sm image-input" id="image<%= i %>"
                                    name="images[<%= i %>]" accept="image/png, image/jpeg, image/jpg, image/webp"
                                    data-index="<%= i %>">

                                  <% if(product.productImage && product.productImage[i]) { %>
                                    <button type="button"
                                      class="btn btn-sm btn-danger position-absolute top-0 end-0 remove-image-btn"
                                      data-index="<%= i %>">
                                      <i class="fas fa-times"></i>
                                    </button>
                                    <% } %>

                                      <input type="hidden" name="croppedImages[<%= i %>]" class="cropped-data"
                                        id="croppedImage<%= i %>">
                          </div>
                        </div>
                      </div>
                      <% } %>
                  </div>
                  <div class="alert alert-warning" id="image-warning" style="display: none;">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    Product must have exactly 3 images. Please upload all required images.
                  </div>
                </div>

                <div class="d-flex justify-content-end mt-4">
                  <a href="/admin/products" class="btn btn-secondary me-2">Cancel</a>
                  <button type="submit" class="btn btn-primary">Update Product</button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>

    <footer class="text-center">
      <p class="mb-0 text-muted">© <%= new Date().getFullYear() %> Admin Dashboard. All rights reserved.</p>
    </footer>
  </div>

  <!-- Crop Modal -->
  <div id="cropModal" class="crop-modal">
    <div class="crop-modal-content">
      <div class="crop-container">
        <img id="cropImage" class="crop-img" src="" alt="Image to crop">
      </div>
      <div class="crop-controls">
        <button id="saveCropBtn" class="crop-btn crop-save">Save Crop</button>
        <button id="cancelCropBtn" class="crop-btn crop-cancel">Cancel</button>
      </div>
    </div>
  </div>

  <!-- Scripts -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>

  <script>

    let cropper = null;
    let currentImageIndex = null;
    let selectedImages = [];
    const MAX_IMAGES = 3;

    document.addEventListener('DOMContentLoaded', function () {
      // Initialize selectedImages with existing images
      document.querySelectorAll('.image-upload-box').forEach((box, index) => {
        const img = box.querySelector('.img-preview');
        if (img && img.src) {
          selectedImages[index] = {
            originalFile: null,
            croppedBlob: null,
            originalUrl: img.src,
            blobUrl: img.src,
            fileName: `product-image-${index}.jpg`,
            isExisting: true
          };
        }
      });

      // Image input change handler
      document.querySelectorAll('.image-input').forEach(input => {
        input.addEventListener('change', handleImageSelection);
      });

      // Form submit handler
      document.getElementById('edit-product-form').addEventListener('submit', handleFormSubmit);

      // Crop modal buttons
      document.getElementById('saveCropBtn').addEventListener('click', saveCroppedImage);
      document.getElementById('cancelCropBtn').addEventListener('click', closeModal);

      // Remove image buttons
      document.querySelectorAll('.remove-image-btn').forEach(btn => {
        btn.addEventListener('click', handleRemoveImage);
      });

      // Price validation
      const regularPriceInput = document.querySelector('input[name="regularPrice"]');
      regularPriceInput.addEventListener('input', validatePrices);
      validatePrices();
    });

    function handleImageSelection(event) {
      const file = event.target.files[0];
      currentImageIndex = parseInt(event.target.dataset.index);

      if (file) {
        const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
        if (!allowedTypes.includes(file.type)) {
          Swal.fire({
            icon: 'error',
            title: 'Invalid File Type',
            text: 'Only JPG, JPEG, PNG, and WEBP are allowed.'
          });
          event.target.value = '';
          return;
        }

        const objectUrl = URL.createObjectURL(file);

        if (!selectedImages[currentImageIndex]) {
          selectedImages[currentImageIndex] = {};
        }

        selectedImages[currentImageIndex].originalFile = file;
        selectedImages[currentImageIndex].originalUrl = objectUrl;
        selectedImages[currentImageIndex].blobUrl = objectUrl;
        selectedImages[currentImageIndex].fileName = `product-image-${Date.now()}-${currentImageIndex}.jpg`;
        selectedImages[currentImageIndex].isExisting = false;

        openCropModal(currentImageIndex);
      }

      event.target.value = '';
    }

    function openCropModal(index) {
      currentImageIndex = index;
      const imageObj = selectedImages[index];

      const modal = document.getElementById('cropModal');
      const cropImage = document.getElementById('cropImage');

      if (cropper) {
        cropper.destroy();
        cropper = null;
      }

      cropImage.src = imageObj.originalUrl;
      modal.style.display = 'flex';

      cropImage.onload = function () {
        cropper = new Cropper(cropImage, {
          aspectRatio: 1,
          viewMode: 1,
          guides: true,
          autoCropArea: 0.8,
          responsive: true,
          background: false,
          zoomable: true,
          zoomOnWheel: true
        });
      };
    }

    function closeModal() {
      const modal = document.getElementById('cropModal');
      modal.style.display = 'none';

      if (cropper) {
        cropper.destroy();
        cropper = null;
      }
    }

    function saveCroppedImage() {
      if (!cropper || currentImageIndex === null) {
        console.error('Cropper not initialized');
        return;
      }

      const imageObj = selectedImages[currentImageIndex];

      const canvas = cropper.getCroppedCanvas({
        width: 400,
        height: 400,
        fillColor: '#fff',
        imageSmoothingEnabled: true,
        imageSmoothingQuality: 'high'
      });

      canvas.toBlob(function (blob) {
        if (imageObj.blobUrl && imageObj.blobUrl !== imageObj.originalUrl) {
          URL.revokeObjectURL(imageObj.blobUrl);
        }

        imageObj.croppedBlob = blob;
        imageObj.blobUrl = URL.createObjectURL(blob);
        imageObj.isExisting = false;

        // Update preview
        const container = document.querySelector(`.image-upload-box[data-index="${currentImageIndex}"]`);
        let previewImg = container.querySelector('.img-preview');

        if (!previewImg) {
          const placeholder = container.querySelector('.img-placeholder');
          if (placeholder) placeholder.remove();

          previewImg = document.createElement('img');
          previewImg.className = 'img-preview img-fluid mb-2';
          previewImg.style = "width: 100%; height: 150px; object-fit: cover; border-radius: 5px;";
          container.querySelector('.card-body').prepend(previewImg);
        }

        previewImg.src = imageObj.blobUrl;

        // Add remove button if not exists
        if (!container.querySelector('.remove-image-btn')) {
          const removeBtn = document.createElement('button');
          removeBtn.type = 'button';
          removeBtn.className = 'btn btn-sm btn-danger position-absolute top-0 end-0 remove-image-btn';
          removeBtn.dataset.index = currentImageIndex;
          removeBtn.innerHTML = '<i class="fas fa-times"></i>';
          removeBtn.addEventListener('click', handleRemoveImage);
          container.appendChild(removeBtn);
        }

        closeModal();
        updateImageWarning();
      }, 'image/jpeg', 0.7);
    }

    function handleRemoveImage(e) {
      const index = parseInt(this.dataset.index);
      const container = document.querySelector(`.image-upload-box[data-index="${index}"]`);
      const previewImg = container.querySelector('.img-preview');

      if (previewImg) {
        previewImg.remove();

        const placeholder = document.createElement('div');
        placeholder.className = 'img-placeholder mb-2 d-flex align-items-center justify-content-center bg-light';
        placeholder.style = "width: 100%; height: 150px; border-radius: 5px;";
        placeholder.innerHTML = '<i class="fas fa-image fa-3x text-muted"></i>';
        container.querySelector('.card-body').prepend(placeholder);
      }

      container.querySelector('.image-input').value = '';
      selectedImages[index] = null;
      this.remove();

      updateImageWarning();
    }

    function updateImageWarning() {
      const filledCount = selectedImages.filter(img => img !== null).length;
      const warningElement = document.getElementById('image-warning');

      if (filledCount < 3) {
        warningElement.style.display = 'block';
      } else {
        warningElement.style.display = 'none';
      }
    }

    function validatePrices() {
      const regularPriceInput = document.querySelector('input[name="regularPrice"]');
      const regularPriceError = document.querySelector('.regular-price-error');
      const regularPrice = parseFloat(regularPriceInput.value);

      if (regularPrice <= 0) {
        regularPriceError.style.display = 'block';
        regularPriceInput.classList.add('is-invalid');
        return false;
      } else {
        regularPriceError.style.display = 'none';
        regularPriceInput.classList.remove('is-invalid');
      }

      return true;
    }

    async function handleFormSubmit(e) {
      e.preventDefault();

      if (!validateForm()) return;

      const formData = new FormData();

      // Add basic fields
      formData.append('productName', document.querySelector('input[name="productName"]').value);
      formData.append('description', document.querySelector('textarea[name="description"]').value);
      formData.append('category', document.querySelector('select[name="category"]').value);
      formData.append('regularPrice', document.querySelector('input[name="regularPrice"]').value);
      formData.append('quantity', document.querySelector('input[name="quantity"]').value);

      // Add images
      for (let i = 0; i < MAX_IMAGES; i++) {
        const imageObj = selectedImages[i];
        if (imageObj) {
          if (imageObj.croppedBlob) {
            // New cropped image
            const file = new File([imageObj.croppedBlob], imageObj.fileName, {
              type: 'image/jpeg',
              lastModified: new Date().getTime()
            });
            formData.append(`images[${i}]`, file);
          } else if (imageObj.isExisting && imageObj.blobUrl) {
            // Keep existing image
            formData.append(`existingImages[${i}]`, imageObj.blobUrl);
          }
        }
      }

      Swal.fire({
        icon: 'info',
        title: 'Saving...',
        text: 'Your product is being updated',
        showConfirmButton: false,
        allowOutsideClick: false
      });

      try {
        const productId = document.querySelector('input[name="productId"]').value;
        const response = await fetch(`/admin/editProduct/${productId}`, {
          method: 'POST',
          body: formData
        });

        const result = await response.json();

        if (result.success) {
          Swal.fire({
            icon: 'success',
            title: 'Product Updated',
            text: result.message
          }).then(() => {
            window.location.href = '/admin/products';
          });
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: result.error || 'An error occurred'
          });
        }
      } catch (error) {
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'An error occurred while updating the product'
        });
      }
    }

    function validateForm() {
      const productName = document.querySelector('input[name="productName"]').value.trim();
      const description = document.querySelector('textarea[name="description"]').value.trim();
      const category = document.querySelector('select[name="category"]').value;
      const regularPrice = parseFloat(document.querySelector('input[name="regularPrice"]').value);
      const quantity = document.querySelector('input[name="quantity"]').value.trim();
      const imageCount = selectedImages.filter(img => img !== null).length;

      if (!productName) {
        Swal.fire({ icon: 'error', title: 'Validation Error', text: 'Product name is required' });
        return false;
      }
      if (!/^[A-Za-z\s]+$/.test(productName)) {
        Swal.fire({ icon: 'error', title: 'Validation Error', text: 'Product name must contain alphabets and spaces only' });
        return false;
      }
      if (productName.length < 2 || productName.length > 75) {
        Swal.fire({ icon: 'error', title: 'Validation Error', text: 'Product name must be 2–75 characters long' });
        return false;
      }

      if (!description) {
        Swal.fire({ icon: 'error', title: 'Validation Error', text: 'Description is required' });
        return false;
      }
      if (!/^[A-Za-z\s]+$/.test(description)) {
        Swal.fire({ icon: 'error', title: 'Validation Error', text: 'Description must contain alphabets and spaces only' });
        return false;
      }
      if (description.length > 1000) {
        Swal.fire({ icon: 'error', title: 'Validation Error', text: 'Description must not exceed 1000 characters' });
        return false;
      }

      if (!category) {
        Swal.fire({ icon: 'error', title: 'Validation Error', text: 'Category is required' });
        return false;
      }

      if (imageCount !== 3) {
        Swal.fire({ icon: 'error', title: 'Image Validation Error', text: 'Product must have exactly 3 images' });
        return false;
      }

      if (isNaN(regularPrice) || regularPrice <= 0) {
        Swal.fire({ icon: 'error', title: 'Price Validation Error', text: 'Regular price must be greater than zero' });
        return false;
      }

      if (quantity === "" || isNaN(quantity) || parseInt(quantity) < 0) {
        Swal.fire({ icon: 'error', title: 'Quantity Validation Error', text: 'Quantity must be zero or a positive number' });
        return false;
      }

      return true;
    }
  </script>
</body>

</html>